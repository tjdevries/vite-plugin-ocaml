// Generated by Melange

import * as Curry from "melange.js/curry.js";
import * as Js__Js_nullable from "melange.js/js_nullable.js";
import * as Stdlib__Option from "melange/option.js";
import * as Stdlib__String from "melange/string.js";
import * as Child_process from "child_process";
import * as Fs from "fs";
import * as Path from "path";

function empty(param) {
  
}

function watch_mode(t) {
  return t.meta.watchMode;
}

const ViteCallback = {
  empty: empty,
  watch_mode: watch_mode
};

function deps_directory(config, dune) {
  if (dune) {
    return Path.join("_build", "default", config.root, config.target, "node_modules");
  } else {
    return Path.join(config.root, config.target, "node_modules");
  }
}

function find_file(dir, source) {
  const path = Path.join(dir, source);
  if (Fs.existsSync(path)) {
    return path;
  }
  
}

function find_src(prefix, config, source) {
  const prefix_len = prefix.length;
  const stripped = Stdlib__String.sub(source, prefix_len + 1 | 0, (source.length - prefix_len | 0) - 1 | 0);
  console.log([
        "STRIPPED",
        stripped
      ]);
  const src_path = Path.join(config.root, config.target);
  return find_file(src_path, stripped);
}

function resolve_sources(config, dune) {
  const prefix = Stdlib__Option.value(config.prefix, "@melange");
  const melange_deps = deps_directory(config, dune);
  return function (source, param, param$1) {
    return new Promise((function (resolve, param) {
                  const resolved = Stdlib__String.starts_with(prefix, source) ? find_src(prefix, config, source) : find_file(melange_deps, source);
                  const resolved$1 = Js__Js_nullable.fromOption(Stdlib__Option.map((function (path) {
                              return {
                                      id: path,
                                      moduleSideEffects: null
                                    };
                            }), resolved));
                  resolve(resolved$1);
                }));
  };
}

function melangeWithoutDune(config) {
  return {
          name: "vite-plugin-ocaml-no-dune",
          enforce: "pre",
          version: "0.1",
          resolveId: resolve_sources(config, false),
          buildStart: empty
        };
}

function melangeWithDune(config) {
  const alias = Stdlib__Option.value(config.alias, "@melange");
  return {
          name: "vite-plugin-ocaml",
          enforce: "pre",
          version: "0.1",
          resolveId: resolve_sources(config, true),
          buildStart: (function (param) {
              let vite = this ;
              if (vite.meta.watchMode) {
                console.log("======= Watching ======");
                return ;
              }
              const child = Child_process.spawnSync("dune", [
                    "build",
                    alias
                  ]);
              const code = child.status;
              if (code !== 0) {
                return Curry._1(vite.error, child.stderr.toString());
              }
              
            })
        };
}

export {
  ViteCallback ,
  deps_directory ,
  find_file ,
  find_src ,
  resolve_sources ,
  melangeWithoutDune ,
  melangeWithDune ,
}
/* empty Not a pure module */
