// Generated by Melange

import * as Belt__Belt_internalBuckets from "./belt_internalBuckets.js";
import * as Belt__Belt_internalBucketsType from "./belt_internalBucketsType.js";
import * as Caml_hash_primitive from "melange.js/caml_hash_primitive.js";
import * as Caml_option from "melange.js/caml_option.js";

function copyBucketReHash(h_buckets, ndata_tail, _old_bucket) {
  while(true) {
    const old_bucket = _old_bucket;
    if (old_bucket === undefined) {
      return ;
    }
    const nidx = Caml_hash_primitive.caml_hash_final_mix(Caml_hash_primitive.caml_hash_mix_string(0, old_bucket.key)) & (h_buckets.length - 1 | 0);
    const tail = ndata_tail[nidx];
    if (tail !== undefined) {
      tail.next = old_bucket;
    } else {
      h_buckets[nidx] = old_bucket;
    }
    ndata_tail[nidx] = old_bucket;
    _old_bucket = old_bucket.next;
    continue ;
  };
}

function replaceInBucket(key, info, _cell) {
  while(true) {
    const cell = _cell;
    if (cell.key === key) {
      cell.value = info;
      return false;
    }
    const cell$1 = cell.next;
    if (cell$1 === undefined) {
      return true;
    }
    _cell = cell$1;
    continue ;
  };
}

function set(h, key, value) {
  const h_buckets = h.buckets;
  const buckets_len = h_buckets.length;
  const i = Caml_hash_primitive.caml_hash_final_mix(Caml_hash_primitive.caml_hash_mix_string(0, key)) & (buckets_len - 1 | 0);
  const l = h_buckets[i];
  if (l !== undefined) {
    if (replaceInBucket(key, value, l)) {
      h_buckets[i] = {
        key: key,
        value: value,
        next: l
      };
      h.size = h.size + 1 | 0;
    }
    
  } else {
    h_buckets[i] = {
      key: key,
      value: value,
      next: undefined
    };
    h.size = h.size + 1 | 0;
  }
  if (h.size > (buckets_len << 1)) {
    const odata = h.buckets;
    const osize = odata.length;
    const nsize = (osize << 1);
    if (nsize < osize) {
      return ;
    }
    const h_buckets$1 = new Array(nsize);
    const ndata_tail = new Array(nsize);
    h.buckets = h_buckets$1;
    for(let i$1 = 0; i$1 < osize; ++i$1){
      copyBucketReHash(h_buckets$1, ndata_tail, odata[i$1]);
    }
    for(let i$2 = 0; i$2 < nsize; ++i$2){
      const tail = ndata_tail[i$2];
      if (tail !== undefined) {
        tail.next = undefined;
      }
      
    }
    return ;
  }
  
}

function remove(h, key) {
  const h_buckets = h.buckets;
  const i = Caml_hash_primitive.caml_hash_final_mix(Caml_hash_primitive.caml_hash_mix_string(0, key)) & (h_buckets.length - 1 | 0);
  const bucket = h_buckets[i];
  if (bucket !== undefined) {
    if (bucket.key === key) {
      h_buckets[i] = bucket.next;
      h.size = h.size - 1 | 0;
      return ;
    } else {
      let _prec = bucket;
      let _buckets = bucket.next;
      while(true) {
        const buckets = _buckets;
        const prec = _prec;
        if (buckets === undefined) {
          return ;
        }
        const cell_next = buckets.next;
        if (buckets.key === key) {
          prec.next = cell_next;
          h.size = h.size - 1 | 0;
          return ;
        }
        _buckets = cell_next;
        _prec = buckets;
        continue ;
      };
    }
  }
  
}

function get(h, key) {
  const h_buckets = h.buckets;
  const nid = Caml_hash_primitive.caml_hash_final_mix(Caml_hash_primitive.caml_hash_mix_string(0, key)) & (h_buckets.length - 1 | 0);
  const cell1 = h_buckets[nid];
  if (cell1 === undefined) {
    return ;
  }
  if (key === cell1.key) {
    return Caml_option.some(cell1.value);
  }
  const cell2 = cell1.next;
  if (cell2 === undefined) {
    return ;
  }
  if (key === cell2.key) {
    return Caml_option.some(cell2.value);
  }
  const cell3 = cell2.next;
  if (cell3 !== undefined) {
    if (key === cell3.key) {
      return Caml_option.some(cell3.value);
    } else {
      let _buckets = cell3.next;
      while(true) {
        const buckets = _buckets;
        if (buckets === undefined) {
          return ;
        }
        if (key === buckets.key) {
          return Caml_option.some(buckets.value);
        }
        _buckets = buckets.next;
        continue ;
      };
    }
  }
  
}

function has(h, key) {
  const h_buckets = h.buckets;
  const nid = Caml_hash_primitive.caml_hash_final_mix(Caml_hash_primitive.caml_hash_mix_string(0, key)) & (h_buckets.length - 1 | 0);
  const bucket = h_buckets[nid];
  if (bucket !== undefined) {
    let _cell = bucket;
    while(true) {
      const cell = _cell;
      if (cell.key === key) {
        return true;
      }
      const nextCell = cell.next;
      if (nextCell === undefined) {
        return false;
      }
      _cell = nextCell;
      continue ;
    };
  } else {
    return false;
  }
}

function make(hintSize) {
  return Belt__Belt_internalBucketsType.make(undefined, undefined, hintSize);
}

function size(h) {
  return h.size;
}

function fromArray(arr) {
  const len = arr.length;
  const v = Belt__Belt_internalBucketsType.make(undefined, undefined, len);
  for(let i = 0; i < len; ++i){
    const match = arr[i];
    set(v, match[0], match[1]);
  }
  return v;
}

function mergeMany(h, arr) {
  const len = arr.length;
  for(let i = 0; i < len; ++i){
    const match = arr[i];
    set(h, match[0], match[1]);
  }
}

const clear = Belt__Belt_internalBucketsType.clear;

const isEmpty = Belt__Belt_internalBucketsType.isEmpty;

const copy = Belt__Belt_internalBuckets.copy;

const forEachU = Belt__Belt_internalBuckets.forEachU;

const forEach = Belt__Belt_internalBuckets.forEach;

const reduceU = Belt__Belt_internalBuckets.reduceU;

const reduce = Belt__Belt_internalBuckets.reduce;

const keepMapInPlaceU = Belt__Belt_internalBuckets.keepMapInPlaceU;

const keepMapInPlace = Belt__Belt_internalBuckets.keepMapInPlace;

const toArray = Belt__Belt_internalBuckets.toArray;

const keysToArray = Belt__Belt_internalBuckets.keysToArray;

const valuesToArray = Belt__Belt_internalBuckets.valuesToArray;

const getBucketHistogram = Belt__Belt_internalBuckets.getBucketHistogram;

const logStats = Belt__Belt_internalBuckets.logStats;

export {
  make ,
  clear ,
  isEmpty ,
  set ,
  copy ,
  get ,
  has ,
  remove ,
  forEachU ,
  forEach ,
  reduceU ,
  reduce ,
  keepMapInPlaceU ,
  keepMapInPlace ,
  size ,
  toArray ,
  keysToArray ,
  valuesToArray ,
  fromArray ,
  mergeMany ,
  getBucketHistogram ,
  logStats ,
}
/* No side effect */
