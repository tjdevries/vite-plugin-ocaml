// Generated by Melange

import * as Belt__Belt_internalAVLtree from "./belt_internalAVLtree.js";
import * as Caml_option from "melange.js/caml_option.js";
import * as Curry from "melange.js/curry.js";

function set(t, newK, newD, cmp) {
  if (t === undefined) {
    return Belt__Belt_internalAVLtree.singleton(newK, newD);
  }
  const n = Caml_option.valFromOption(t);
  const k = n.k;
  const c = cmp(newK, k);
  if (c === 0) {
    return Belt__Belt_internalAVLtree.updateValue(n, newD);
  }
  const l = n.l;
  const r = n.r;
  const v = n.v;
  if (c < 0) {
    return Belt__Belt_internalAVLtree.bal(set(l, newK, newD, cmp), k, v, r);
  } else {
    return Belt__Belt_internalAVLtree.bal(l, k, v, set(r, newK, newD, cmp));
  }
}

function updateU(t, newK, f, cmp) {
  if (t !== undefined) {
    const n = Caml_option.valFromOption(t);
    const k = n.k;
    const c = cmp(newK, k);
    if (c === 0) {
      const newD = f(Caml_option.some(n.v));
      if (newD !== undefined) {
        return Belt__Belt_internalAVLtree.updateValue(n, Caml_option.valFromOption(newD));
      }
      const l = n.l;
      const r = n.r;
      if (l === undefined) {
        return r;
      }
      if (r === undefined) {
        return l;
      }
      const rn = Caml_option.valFromOption(r);
      const kr = {
        contents: rn.k
      };
      const vr = {
        contents: rn.v
      };
      const r$1 = Belt__Belt_internalAVLtree.removeMinAuxWithRef(rn, kr, vr);
      return Belt__Belt_internalAVLtree.bal(l, kr.contents, vr.contents, r$1);
    }
    const l$1 = n.l;
    const r$2 = n.r;
    const v = n.v;
    if (c < 0) {
      const ll = updateU(l$1, newK, f, cmp);
      if (l$1 === ll) {
        return t;
      } else {
        return Belt__Belt_internalAVLtree.bal(ll, k, v, r$2);
      }
    }
    const rr = updateU(r$2, newK, f, cmp);
    if (r$2 === rr) {
      return t;
    } else {
      return Belt__Belt_internalAVLtree.bal(l$1, k, v, rr);
    }
  }
  const newD$1 = f(undefined);
  if (newD$1 !== undefined) {
    return Belt__Belt_internalAVLtree.singleton(newK, Caml_option.valFromOption(newD$1));
  } else {
    return t;
  }
}

function update(t, newK, f, cmp) {
  return updateU(t, newK, Curry.__1(f), cmp);
}

function removeAux0(n, x, cmp) {
  const v = n.k;
  const l = n.l;
  const r = n.r;
  const c = cmp(x, v);
  if (c === 0) {
    if (l === undefined) {
      return r;
    }
    if (r === undefined) {
      return l;
    }
    const rn = Caml_option.valFromOption(r);
    const kr = {
      contents: rn.k
    };
    const vr = {
      contents: rn.v
    };
    const r$1 = Belt__Belt_internalAVLtree.removeMinAuxWithRef(rn, kr, vr);
    return Belt__Belt_internalAVLtree.bal(l, kr.contents, vr.contents, r$1);
  }
  if (c < 0) {
    if (l === undefined) {
      return n;
    }
    const ll = removeAux0(Caml_option.valFromOption(l), x, cmp);
    if (ll === l) {
      return n;
    } else {
      return Belt__Belt_internalAVLtree.bal(ll, v, n.v, r);
    }
  }
  if (r === undefined) {
    return n;
  }
  const rr = removeAux0(Caml_option.valFromOption(r), x, cmp);
  if (rr === r) {
    return n;
  } else {
    return Belt__Belt_internalAVLtree.bal(l, v, n.v, rr);
  }
}

function remove(n, x, cmp) {
  if (n !== undefined) {
    return removeAux0(n, x, cmp);
  }
  
}

function mergeMany(h, arr, cmp) {
  const len = arr.length;
  let v = h;
  for(let i = 0; i < len; ++i){
    const match = arr[i];
    v = set(v, match[0], match[1], cmp);
  }
  return v;
}

function splitAuxPivot(n, x, pres, cmp) {
  const v = n.k;
  const d = n.v;
  const l = n.l;
  const r = n.r;
  const c = cmp(x, v);
  if (c === 0) {
    pres.contents = Caml_option.some(d);
    return [
            l,
            r
          ];
  }
  if (c < 0) {
    if (l === undefined) {
      return [
              undefined,
              n
            ];
    }
    const match = splitAuxPivot(Caml_option.valFromOption(l), x, pres, cmp);
    return [
            match[0],
            Belt__Belt_internalAVLtree.join(match[1], v, d, r)
          ];
  }
  if (r === undefined) {
    return [
            n,
            undefined
          ];
  }
  const match$1 = splitAuxPivot(Caml_option.valFromOption(r), x, pres, cmp);
  return [
          Belt__Belt_internalAVLtree.join(l, v, d, match$1[0]),
          match$1[1]
        ];
}

function split(n, x, cmp) {
  if (n === undefined) {
    return [
            [
              undefined,
              undefined
            ],
            undefined
          ];
  }
  const pres = {
    contents: undefined
  };
  const v = splitAuxPivot(n, x, pres, cmp);
  return [
          v,
          pres.contents
        ];
}

function mergeU(s1, s2, f, cmp) {
  if (s1 === undefined) {
    if (s2 !== undefined) {
      return Belt__Belt_internalAVLtree.keepMapU(s2, (function (k, v) {
                    return f(k, undefined, Caml_option.some(v));
                  }));
    } else {
      return ;
    }
  }
  const s1n = Caml_option.valFromOption(s1);
  if (s2 === undefined) {
    return Belt__Belt_internalAVLtree.keepMapU(s1, (function (k, v) {
                  return f(k, Caml_option.some(v), undefined);
                }));
  }
  const s2n = Caml_option.valFromOption(s2);
  if (s1n.h >= s2n.h) {
    const v1 = s1n.k;
    const d1 = s1n.v;
    const l1 = s1n.l;
    const r1 = s1n.r;
    const d2 = {
      contents: undefined
    };
    const match = splitAuxPivot(s2n, v1, d2, cmp);
    const d2$1 = d2.contents;
    const newLeft = mergeU(l1, match[0], f, cmp);
    const newD = f(v1, Caml_option.some(d1), d2$1);
    const newRight = mergeU(r1, match[1], f, cmp);
    return Belt__Belt_internalAVLtree.concatOrJoin(newLeft, v1, newD, newRight);
  }
  const v2 = s2n.k;
  const d2$2 = s2n.v;
  const l2 = s2n.l;
  const r2 = s2n.r;
  const d1$1 = {
    contents: undefined
  };
  const match$1 = splitAuxPivot(s1n, v2, d1$1, cmp);
  const d1$2 = d1$1.contents;
  const newLeft$1 = mergeU(match$1[0], l2, f, cmp);
  const newD$1 = f(v2, d1$2, Caml_option.some(d2$2));
  const newRight$1 = mergeU(match$1[1], r2, f, cmp);
  return Belt__Belt_internalAVLtree.concatOrJoin(newLeft$1, v2, newD$1, newRight$1);
}

function merge(s1, s2, f, cmp) {
  return mergeU(s1, s2, Curry.__3(f), cmp);
}

function removeMany(t, keys, cmp) {
  const len = keys.length;
  if (t !== undefined) {
    let _t = t;
    let _i = 0;
    while(true) {
      const i = _i;
      const t$1 = _t;
      if (i >= len) {
        return t$1;
      }
      const ele = keys[i];
      const u = removeAux0(t$1, ele, cmp);
      if (u === undefined) {
        return u;
      }
      _i = i + 1 | 0;
      _t = Caml_option.valFromOption(u);
      continue ;
    };
  }
  
}

let empty;

const isEmpty = Belt__Belt_internalAVLtree.isEmpty;

const has = Belt__Belt_internalAVLtree.has;

const cmpU = Belt__Belt_internalAVLtree.cmpU;

const cmp = Belt__Belt_internalAVLtree.cmp;

const eqU = Belt__Belt_internalAVLtree.eqU;

const eq = Belt__Belt_internalAVLtree.eq;

const findFirstByU = Belt__Belt_internalAVLtree.findFirstByU;

const findFirstBy = Belt__Belt_internalAVLtree.findFirstBy;

const forEachU = Belt__Belt_internalAVLtree.forEachU;

const forEach = Belt__Belt_internalAVLtree.forEach;

const reduceU = Belt__Belt_internalAVLtree.reduceU;

const reduce = Belt__Belt_internalAVLtree.reduce;

const everyU = Belt__Belt_internalAVLtree.everyU;

const every = Belt__Belt_internalAVLtree.every;

const someU = Belt__Belt_internalAVLtree.someU;

const some = Belt__Belt_internalAVLtree.some;

const size = Belt__Belt_internalAVLtree.size;

const toList = Belt__Belt_internalAVLtree.toList;

const toArray = Belt__Belt_internalAVLtree.toArray;

const fromArray = Belt__Belt_internalAVLtree.fromArray;

const keysToArray = Belt__Belt_internalAVLtree.keysToArray;

const valuesToArray = Belt__Belt_internalAVLtree.valuesToArray;

const minKey = Belt__Belt_internalAVLtree.minKey;

const minKeyUndefined = Belt__Belt_internalAVLtree.minKeyUndefined;

const maxKey = Belt__Belt_internalAVLtree.maxKey;

const maxKeyUndefined = Belt__Belt_internalAVLtree.maxKeyUndefined;

const minimum = Belt__Belt_internalAVLtree.minimum;

const minUndefined = Belt__Belt_internalAVLtree.minUndefined;

const maximum = Belt__Belt_internalAVLtree.maximum;

const maxUndefined = Belt__Belt_internalAVLtree.maxUndefined;

const get = Belt__Belt_internalAVLtree.get;

const getUndefined = Belt__Belt_internalAVLtree.getUndefined;

const getWithDefault = Belt__Belt_internalAVLtree.getWithDefault;

const getExn = Belt__Belt_internalAVLtree.getExn;

const checkInvariantInternal = Belt__Belt_internalAVLtree.checkInvariantInternal;

const keepU = Belt__Belt_internalAVLtree.keepSharedU;

const keep = Belt__Belt_internalAVLtree.keepShared;

const partitionU = Belt__Belt_internalAVLtree.partitionSharedU;

const partition = Belt__Belt_internalAVLtree.partitionShared;

const mapU = Belt__Belt_internalAVLtree.mapU;

const map = Belt__Belt_internalAVLtree.map;

const mapWithKeyU = Belt__Belt_internalAVLtree.mapWithKeyU;

const mapWithKey = Belt__Belt_internalAVLtree.mapWithKey;

export {
  empty ,
  isEmpty ,
  has ,
  cmpU ,
  cmp ,
  eqU ,
  eq ,
  findFirstByU ,
  findFirstBy ,
  forEachU ,
  forEach ,
  reduceU ,
  reduce ,
  everyU ,
  every ,
  someU ,
  some ,
  size ,
  toList ,
  toArray ,
  fromArray ,
  keysToArray ,
  valuesToArray ,
  minKey ,
  minKeyUndefined ,
  maxKey ,
  maxKeyUndefined ,
  minimum ,
  minUndefined ,
  maximum ,
  maxUndefined ,
  get ,
  getUndefined ,
  getWithDefault ,
  getExn ,
  checkInvariantInternal ,
  remove ,
  removeMany ,
  set ,
  updateU ,
  update ,
  mergeU ,
  merge ,
  mergeMany ,
  keepU ,
  keep ,
  partitionU ,
  partition ,
  split ,
  mapU ,
  map ,
  mapWithKeyU ,
  mapWithKey ,
}
/* No side effect */
