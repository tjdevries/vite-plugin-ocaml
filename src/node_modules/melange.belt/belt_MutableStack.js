// Generated by Melange

import * as Caml_option from "melange.js/caml_option.js";
import * as Curry from "melange.js/curry.js";

function make(param) {
  return {
          root: undefined
        };
}

function clear(s) {
  s.root = undefined;
}

function copy(s) {
  return {
          root: s.root
        };
}

function push(s, x) {
  s.root = {
    head: x,
    tail: s.root
  };
}

function topUndefined(s) {
  const x = s.root;
  if (x !== undefined) {
    return Caml_option.valFromOption(x).head;
  }
  
}

function top(s) {
  const x = s.root;
  if (x !== undefined) {
    return Caml_option.some(Caml_option.valFromOption(x).head);
  }
  
}

function isEmpty(s) {
  return s.root === undefined;
}

function popUndefined(s) {
  const x = s.root;
  if (x === undefined) {
    return ;
  }
  const x$1 = Caml_option.valFromOption(x);
  s.root = x$1.tail;
  return x$1.head;
}

function pop(s) {
  const x = s.root;
  if (x === undefined) {
    return ;
  }
  const x$1 = Caml_option.valFromOption(x);
  s.root = x$1.tail;
  return Caml_option.some(x$1.head);
}

function size(s) {
  const x = s.root;
  if (x !== undefined) {
    let _x = Caml_option.valFromOption(x);
    let _acc = 0;
    while(true) {
      const acc = _acc;
      const x$1 = _x;
      const x$2 = x$1.tail;
      if (x$2 === undefined) {
        return acc + 1 | 0;
      }
      _acc = acc + 1 | 0;
      _x = Caml_option.valFromOption(x$2);
      continue ;
    };
  } else {
    return 0;
  }
}

function forEachU(s, f) {
  let _s = s.root;
  while(true) {
    const s$1 = _s;
    if (s$1 === undefined) {
      return ;
    }
    const x = Caml_option.valFromOption(s$1);
    f(x.head);
    _s = x.tail;
    continue ;
  };
}

function forEach(s, f) {
  forEachU(s, Curry.__1(f));
}

function dynamicPopIterU(s, f) {
  while(true) {
    const match = s.root;
    if (match === undefined) {
      return ;
    }
    const match$1 = Caml_option.valFromOption(match);
    s.root = match$1.tail;
    f(match$1.head);
    continue ;
  };
}

function dynamicPopIter(s, f) {
  dynamicPopIterU(s, Curry.__1(f));
}

export {
  make ,
  clear ,
  copy ,
  push ,
  popUndefined ,
  pop ,
  topUndefined ,
  top ,
  isEmpty ,
  size ,
  forEachU ,
  forEach ,
  dynamicPopIterU ,
  dynamicPopIter ,
}
/* No side effect */
