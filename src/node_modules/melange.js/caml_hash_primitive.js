// Generated by Melange


function rotl32(x, n) {
  return (x << n) | (x >>> (32 - n | 0)) | 0;
}

function caml_hash_mix_int(h, d) {
  let d$1 = d;
  d$1 = Math.imul(d$1, -862048943);
  d$1 = rotl32(d$1, 15);
  d$1 = Math.imul(d$1, 461845907);
  let h$1 = h ^ d$1;
  h$1 = rotl32(h$1, 13);
  return (h$1 + (h$1 << 2) | 0) - 430675100 | 0;
}

function caml_hash_final_mix(h) {
  let h$1 = h ^ (h >>> 16);
  h$1 = Math.imul(h$1, -2048144789);
  h$1 = h$1 ^ (h$1 >>> 13);
  h$1 = Math.imul(h$1, -1028477387);
  return h$1 ^ (h$1 >>> 16);
}

function caml_hash_mix_string(h, s) {
  const len = s.length;
  const block = (len / 4 | 0) - 1 | 0;
  let hash = h;
  for(let i = 0; i <= block; ++i){
    const j = (i << 2);
    const w = s.charCodeAt(j) | (s.charCodeAt(j + 1 | 0) << 8) | (s.charCodeAt(j + 2 | 0) << 16) | (s.charCodeAt(j + 3 | 0) << 24);
    hash = caml_hash_mix_int(hash, w);
  }
  const modulo = len & 3;
  if (modulo !== 0) {
    const w$1 = modulo === 3 ? (s.charCodeAt(len - 1 | 0) << 16) | (s.charCodeAt(len - 2 | 0) << 8) | s.charCodeAt(len - 3 | 0) : (
        modulo === 2 ? (s.charCodeAt(len - 1 | 0) << 8) | s.charCodeAt(len - 2 | 0) : s.charCodeAt(len - 1 | 0)
      );
    hash = caml_hash_mix_int(hash, w$1);
  }
  hash = hash ^ len;
  return hash;
}

export {
  caml_hash_mix_int ,
  caml_hash_mix_string ,
  caml_hash_final_mix ,
}
/* No side effect */
