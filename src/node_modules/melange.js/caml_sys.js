// Generated by Melange

import * as Caml_js_exceptions from "melange.js/caml_js_exceptions.js";

function caml_sys_getenv(s) {
  if (typeof process === "undefined" || process.env === undefined) {
    throw new Caml_js_exceptions.MelangeError("Not_found", {
              MEL_EXN_ID: "Not_found"
            });
  }
  const x = process.env[s];
  if (x !== undefined) {
    return x;
  }
  throw new Caml_js_exceptions.MelangeError("Not_found", {
            MEL_EXN_ID: "Not_found"
          });
}

const os_type = (function(_){
  if(typeof process !== 'undefined' && process.platform === 'win32'){
        return "Win32"
  }
  else {
    return "Unix"
  }
}
);

function caml_sys_time(param) {
  if (typeof process === "undefined" || process.uptime === undefined) {
    return -1;
  } else {
    return process.uptime();
  }
}

function caml_sys_system_command(_cmd) {
  return 127;
}

const caml_sys_getcwd = (function(param){
    if (typeof process === "undefined" || process.cwd === undefined){
      return "/"
    }
    return process.cwd()
  }
);

function caml_sys_executable_name(param) {
  if (typeof process === "undefined") {
    return "";
  }
  const argv = process.argv;
  if (argv == null) {
    return "";
  } else {
    return argv[0];
  }
}

function caml_sys_argv(param) {
  if (typeof process === "undefined") {
    return [""];
  }
  const argv = process.argv;
  if (argv == null) {
    return [""];
  } else {
    return argv;
  }
}

function caml_sys_exit(exit_code) {
  if (typeof process !== "undefined") {
    return process.exit(exit_code);
  }
  
}

function caml_sys_is_directory(_s) {
  throw new Caml_js_exceptions.MelangeError("Failure", {
            MEL_EXN_ID: "Failure",
            _1: "caml_sys_is_directory not implemented"
          });
}

function caml_sys_file_exists(_s) {
  throw new Caml_js_exceptions.MelangeError("Failure", {
            MEL_EXN_ID: "Failure",
            _1: "caml_sys_file_exists not implemented"
          });
}

export {
  caml_sys_getenv ,
  caml_sys_time ,
  os_type ,
  caml_sys_system_command ,
  caml_sys_getcwd ,
  caml_sys_executable_name ,
  caml_sys_argv ,
  caml_sys_exit ,
  caml_sys_is_directory ,
  caml_sys_file_exists ,
}
/* No side effect */
