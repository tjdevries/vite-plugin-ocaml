// Generated by Melange

import * as Caml_option from "melange.js/caml_option.js";

function get(dict, k) {
  if ((k in dict
    )) {
    return Caml_option.some(dict[k]);
  }
  
}

const unsafeDeleteKey = (function (dict,key){
      delete dict[key];
     }
);

function entries(dict) {
  const keys = Object.keys(dict);
  const l = keys.length;
  const values = new Array(l);
  for(let i = 0; i < l; ++i){
    const key = keys[i];
    values[i] = [
      key,
      dict[key]
    ];
  }
  return values;
}

function values(dict) {
  const keys = Object.keys(dict);
  const l = keys.length;
  const values$1 = new Array(l);
  for(let i = 0; i < l; ++i){
    values$1[i] = dict[keys[i]];
  }
  return values$1;
}

function fromList(entries) {
  const dict = {};
  let _param = entries;
  while(true) {
    const param = _param;
    if (!param) {
      return dict;
    }
    const match = param.hd;
    dict[match[0]] = match[1];
    _param = param.tl;
    continue ;
  };
}

function fromArray(entries) {
  const dict = {};
  const l = entries.length;
  for(let i = 0; i < l; ++i){
    const match = entries[i];
    dict[match[0]] = match[1];
  }
  return dict;
}

function map(f, source) {
  const target = {};
  const keys = Object.keys(source);
  const l = keys.length;
  for(let i = 0; i < l; ++i){
    const key = keys[i];
    target[key] = f(source[key]);
  }
  return target;
}

export {
  get ,
  unsafeDeleteKey ,
  entries ,
  values ,
  fromList ,
  fromArray ,
  map ,
}
/* No side effect */
