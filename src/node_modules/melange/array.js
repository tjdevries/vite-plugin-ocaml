// Generated by Melange

import * as Caml_array from "melange.js/caml_array.js";
import * as Caml_exceptions from "melange.js/caml_exceptions.js";
import * as Caml_js_exceptions from "melange.js/caml_js_exceptions.js";
import * as Caml_obj from "melange.js/caml_obj.js";
import * as Caml_option from "melange.js/caml_option.js";
import * as Curry from "melange.js/curry.js";
import * as Stdlib__Seq from "./seq.js";

const Floatarray = {};

function init(l, f) {
  if (l === 0) {
    return [];
  }
  if (l < 0) {
    throw new Caml_js_exceptions.MelangeError("Invalid_argument", {
              MEL_EXN_ID: "Invalid_argument",
              _1: "Array.init"
            });
  }
  const res = Caml_array.make(l, Curry._1(f, 0));
  for(let i = 1; i < l; ++i){
    res[i] = Curry._1(f, i);
  }
  return res;
}

function make_matrix(sx, sy, init) {
  if (sy < 0) {
    throw new Caml_js_exceptions.MelangeError("Invalid_argument", {
              MEL_EXN_ID: "Invalid_argument",
              _1: "Array.make_matrix"
            });
  }
  const res = Caml_array.make(sx, []);
  if (sy > 0) {
    for(let x = 0; x < sx; ++x){
      res[x] = Caml_array.make(sy, init);
    }
  }
  return res;
}

function init_matrix(sx, sy, f) {
  if (sy < 0) {
    throw new Caml_js_exceptions.MelangeError("Invalid_argument", {
              MEL_EXN_ID: "Invalid_argument",
              _1: "Array.init_matrix"
            });
  }
  const res = Caml_array.make(sx, []);
  if (sy > 0) {
    for(let x = 0; x < sx; ++x){
      const row = Caml_array.make(sy, Curry._2(f, x, 0));
      for(let y = 1; y < sy; ++y){
        row[y] = Curry._2(f, x, y);
      }
      res[x] = row;
    }
  }
  return res;
}

function copy(a) {
  const l = a.length;
  if (l === 0) {
    return [];
  } else {
    return Caml_array.sub(a, 0, l);
  }
}

function append(a1, a2) {
  const l1 = a1.length;
  if (l1 === 0) {
    return copy(a2);
  } else if (a2.length === 0) {
    return Caml_array.sub(a1, 0, l1);
  } else {
    return a1.concat(a2);
  }
}

function sub(a, ofs, len) {
  if (ofs < 0 || len < 0 || ofs > (a.length - len | 0)) {
    throw new Caml_js_exceptions.MelangeError("Invalid_argument", {
              MEL_EXN_ID: "Invalid_argument",
              _1: "Array.sub"
            });
  }
  return Caml_array.sub(a, ofs, len);
}

function fill(a, ofs, len, v) {
  if (ofs < 0 || len < 0 || ofs > (a.length - len | 0)) {
    throw new Caml_js_exceptions.MelangeError("Invalid_argument", {
              MEL_EXN_ID: "Invalid_argument",
              _1: "Array.fill"
            });
  }
  for(let i = ofs ,i_finish = ofs + len | 0; i < i_finish; ++i){
    a[i] = v;
  }
}

function blit(a1, ofs1, a2, ofs2, len) {
  if (len < 0 || ofs1 < 0 || ofs1 > (a1.length - len | 0) || ofs2 < 0 || ofs2 > (a2.length - len | 0)) {
    throw new Caml_js_exceptions.MelangeError("Invalid_argument", {
              MEL_EXN_ID: "Invalid_argument",
              _1: "Array.blit"
            });
  }
  Caml_array.blit(a1, ofs1, a2, ofs2, len);
}

function iter(f, a) {
  for(let i = 0 ,i_finish = a.length; i < i_finish; ++i){
    Curry._1(f, a[i]);
  }
}

function iter2(f, a, b) {
  if (a.length !== b.length) {
    throw new Caml_js_exceptions.MelangeError("Invalid_argument", {
              MEL_EXN_ID: "Invalid_argument",
              _1: "Array.iter2: arrays must have the same length"
            });
  }
  for(let i = 0 ,i_finish = a.length; i < i_finish; ++i){
    Curry._2(f, a[i], b[i]);
  }
}

function map(f, a) {
  const l = a.length;
  if (l === 0) {
    return [];
  }
  const r = Caml_array.make(l, Curry._1(f, a[0]));
  for(let i = 1; i < l; ++i){
    r[i] = Curry._1(f, a[i]);
  }
  return r;
}

function map_inplace(f, a) {
  for(let i = 0 ,i_finish = a.length; i < i_finish; ++i){
    a[i] = Curry._1(f, a[i]);
  }
}

function mapi_inplace(f, a) {
  for(let i = 0 ,i_finish = a.length; i < i_finish; ++i){
    a[i] = Curry._2(f, i, a[i]);
  }
}

function map2(f, a, b) {
  const la = a.length;
  const lb = b.length;
  if (la !== lb) {
    throw new Caml_js_exceptions.MelangeError("Invalid_argument", {
              MEL_EXN_ID: "Invalid_argument",
              _1: "Array.map2: arrays must have the same length"
            });
  }
  if (la === 0) {
    return [];
  }
  const r = Caml_array.make(la, Curry._2(f, a[0], b[0]));
  for(let i = 1; i < la; ++i){
    r[i] = Curry._2(f, a[i], b[i]);
  }
  return r;
}

function iteri(f, a) {
  for(let i = 0 ,i_finish = a.length; i < i_finish; ++i){
    Curry._2(f, i, a[i]);
  }
}

function mapi(f, a) {
  const l = a.length;
  if (l === 0) {
    return [];
  }
  const r = Caml_array.make(l, Curry._2(f, 0, a[0]));
  for(let i = 1; i < l; ++i){
    r[i] = Curry._2(f, i, a[i]);
  }
  return r;
}

function to_list(a) {
  let _i = a.length - 1 | 0;
  let _res = /* [] */0;
  while(true) {
    const res = _res;
    const i = _i;
    if (i < 0) {
      return res;
    }
    _res = {
      hd: a[i],
      tl: res
    };
    _i = i - 1 | 0;
    continue ;
  };
}

function list_length(_accu, _param) {
  while(true) {
    const param = _param;
    const accu = _accu;
    if (!param) {
      return accu;
    }
    _param = param.tl;
    _accu = accu + 1 | 0;
    continue ;
  };
}

function of_list(l) {
  if (!l) {
    return [];
  }
  const a = Caml_array.make(list_length(0, l), l.hd);
  let _i = 1;
  let _param = l.tl;
  while(true) {
    const param = _param;
    const i = _i;
    if (!param) {
      return a;
    }
    a[i] = param.hd;
    _param = param.tl;
    _i = i + 1 | 0;
    continue ;
  };
}

function fold_left(f, x, a) {
  let r = x;
  for(let i = 0 ,i_finish = a.length; i < i_finish; ++i){
    r = Curry._2(f, r, a[i]);
  }
  return r;
}

function fold_left_map(f, acc, input_array) {
  const len = input_array.length;
  if (len === 0) {
    return [
            acc,
            []
          ];
  }
  const match = Curry._2(f, acc, input_array[0]);
  const output_array = Caml_array.make(len, match[1]);
  let acc$1 = match[0];
  for(let i = 1; i < len; ++i){
    const match$1 = Curry._2(f, acc$1, input_array[i]);
    acc$1 = match$1[0];
    output_array[i] = match$1[1];
  }
  return [
          acc$1,
          output_array
        ];
}

function fold_right(f, a, x) {
  let r = x;
  for(let i = a.length - 1 | 0; i >= 0; --i){
    r = Curry._2(f, a[i], r);
  }
  return r;
}

function exists(p, a) {
  const n = a.length;
  let _i = 0;
  while(true) {
    const i = _i;
    if (i === n) {
      return false;
    }
    if (Curry._1(p, a[i])) {
      return true;
    }
    _i = i + 1 | 0;
    continue ;
  };
}

function for_all(p, a) {
  const n = a.length;
  let _i = 0;
  while(true) {
    const i = _i;
    if (i === n) {
      return true;
    }
    if (!Curry._1(p, a[i])) {
      return false;
    }
    _i = i + 1 | 0;
    continue ;
  };
}

function for_all2(p, l1, l2) {
  const n1 = l1.length;
  const n2 = l2.length;
  if (n1 !== n2) {
    throw new Caml_js_exceptions.MelangeError("Invalid_argument", {
              MEL_EXN_ID: "Invalid_argument",
              _1: "Array.for_all2"
            });
  }
  let _i = 0;
  while(true) {
    const i = _i;
    if (i === n1) {
      return true;
    }
    if (!Curry._2(p, l1[i], l2[i])) {
      return false;
    }
    _i = i + 1 | 0;
    continue ;
  };
}

function exists2(p, l1, l2) {
  const n1 = l1.length;
  const n2 = l2.length;
  if (n1 !== n2) {
    throw new Caml_js_exceptions.MelangeError("Invalid_argument", {
              MEL_EXN_ID: "Invalid_argument",
              _1: "Array.exists2"
            });
  }
  let _i = 0;
  while(true) {
    const i = _i;
    if (i === n1) {
      return false;
    }
    if (Curry._2(p, l1[i], l2[i])) {
      return true;
    }
    _i = i + 1 | 0;
    continue ;
  };
}

function mem(x, a) {
  const n = a.length;
  let _i = 0;
  while(true) {
    const i = _i;
    if (i === n) {
      return false;
    }
    if (Caml_obj.caml_equal(a[i], x)) {
      return true;
    }
    _i = i + 1 | 0;
    continue ;
  };
}

function memq(x, a) {
  const n = a.length;
  let _i = 0;
  while(true) {
    const i = _i;
    if (i === n) {
      return false;
    }
    if (x === a[i]) {
      return true;
    }
    _i = i + 1 | 0;
    continue ;
  };
}

function find_opt(p, a) {
  const n = a.length;
  let _i = 0;
  while(true) {
    const i = _i;
    if (i === n) {
      return ;
    }
    const x = a[i];
    if (Curry._1(p, x)) {
      return Caml_option.some(x);
    }
    _i = i + 1 | 0;
    continue ;
  };
}

function find_index(p, a) {
  const n = a.length;
  let _i = 0;
  while(true) {
    const i = _i;
    if (i === n) {
      return ;
    }
    if (Curry._1(p, a[i])) {
      return i;
    }
    _i = i + 1 | 0;
    continue ;
  };
}

function find_map(f, a) {
  const n = a.length;
  let _i = 0;
  while(true) {
    const i = _i;
    if (i === n) {
      return ;
    }
    const r = Curry._1(f, a[i]);
    if (r !== undefined) {
      return r;
    }
    _i = i + 1 | 0;
    continue ;
  };
}

function find_mapi(f, a) {
  const n = a.length;
  let _i = 0;
  while(true) {
    const i = _i;
    if (i === n) {
      return ;
    }
    const r = Curry._2(f, i, a[i]);
    if (r !== undefined) {
      return r;
    }
    _i = i + 1 | 0;
    continue ;
  };
}

function split(x) {
  if (Caml_obj.caml_equal(x, [])) {
    return [
            [],
            []
          ];
  }
  const match = x[0];
  const n = x.length;
  const a = Caml_array.make(n, match[0]);
  const b = Caml_array.make(n, match[1]);
  for(let i = 1; i < n; ++i){
    const match$1 = x[i];
    a[i] = match$1[0];
    b[i] = match$1[1];
  }
  return [
          a,
          b
        ];
}

function combine(a, b) {
  const na = a.length;
  const nb = b.length;
  if (na !== nb) {
    throw new Caml_js_exceptions.MelangeError("Invalid_argument", {
              MEL_EXN_ID: "Invalid_argument",
              _1: "Array.combine"
            });
  }
  if (na === 0) {
    return [];
  }
  const x = Caml_array.make(na, [
        a[0],
        b[0]
      ]);
  for(let i = 1; i < na; ++i){
    x[i] = [
      a[i],
      b[i]
    ];
  }
  return x;
}

const Bottom = /* @__PURE__ */Caml_exceptions.create("Stdlib.Array.Bottom");

function sort(cmp, a) {
  const maxson = function (l, i) {
    const i31 = ((i + i | 0) + i | 0) + 1 | 0;
    let x = i31;
    if ((i31 + 2 | 0) < l) {
      if (Curry._2(cmp, Caml_array.get(a, i31), Caml_array.get(a, i31 + 1 | 0)) < 0) {
        x = i31 + 1 | 0;
      }
      if (Curry._2(cmp, Caml_array.get(a, x), Caml_array.get(a, i31 + 2 | 0)) < 0) {
        x = i31 + 2 | 0;
      }
      return x;
    }
    if ((i31 + 1 | 0) < l && Curry._2(cmp, Caml_array.get(a, i31), Caml_array.get(a, i31 + 1 | 0)) < 0) {
      return i31 + 1 | 0;
    }
    if (i31 < l) {
      return i31;
    }
    throw new Caml_js_exceptions.MelangeError(Bottom, {
              MEL_EXN_ID: Bottom,
              _1: i
            });
  };
  const trickle = function (l, i, e) {
    try {
      let _i = i;
      while(true) {
        const i$1 = _i;
        const j = maxson(l, i$1);
        if (Curry._2(cmp, Caml_array.get(a, j), e) <= 0) {
          return Caml_array.set(a, i$1, e);
        }
        Caml_array.set(a, i$1, Caml_array.get(a, j));
        _i = j;
        continue ;
      };
    }
    catch (raw_i){
      const i$2 = Caml_js_exceptions.internalToOCamlException(raw_i);
      if (i$2.MEL_EXN_ID === Bottom) {
        return Caml_array.set(a, i$2._1, e);
      }
      throw new Caml_js_exceptions.MelangeError(i$2.MEL_EXN_ID, i$2);
    }
  };
  const bubble = function (l, i) {
    try {
      let _i = i;
      while(true) {
        const i$1 = _i;
        const j = maxson(l, i$1);
        Caml_array.set(a, i$1, Caml_array.get(a, j));
        _i = j;
        continue ;
      };
    }
    catch (raw_i){
      const i$2 = Caml_js_exceptions.internalToOCamlException(raw_i);
      if (i$2.MEL_EXN_ID === Bottom) {
        return i$2._1;
      }
      throw new Caml_js_exceptions.MelangeError(i$2.MEL_EXN_ID, i$2);
    }
  };
  const trickleup = function (_i, e) {
    while(true) {
      const i = _i;
      const father = (i - 1 | 0) / 3 | 0;
      if (i === father) {
        throw new Caml_js_exceptions.MelangeError("Assert_failure", {
                  MEL_EXN_ID: "Assert_failure",
                  _1: [
                    "array.cppo.ml",
                    374,
                    4
                  ]
                });
      }
      if (Curry._2(cmp, Caml_array.get(a, father), e) >= 0) {
        return Caml_array.set(a, i, e);
      }
      Caml_array.set(a, i, Caml_array.get(a, father));
      if (father <= 0) {
        return Caml_array.set(a, 0, e);
      }
      _i = father;
      continue ;
    };
  };
  const l = a.length;
  for(let i = ((l + 1 | 0) / 3 | 0) - 1 | 0; i >= 0; --i){
    trickle(l, i, Caml_array.get(a, i));
  }
  for(let i$1 = l - 1 | 0; i$1 >= 2; --i$1){
    const e = Caml_array.get(a, i$1);
    Caml_array.set(a, i$1, Caml_array.get(a, 0));
    trickleup(bubble(i$1, 0), e);
  }
  if (l <= 1) {
    return ;
  }
  const e$1 = Caml_array.get(a, 1);
  Caml_array.set(a, 1, Caml_array.get(a, 0));
  Caml_array.set(a, 0, e$1);
}

function stable_sort(cmp, a) {
  const merge = function (src1ofs, src1len, src2, src2ofs, src2len, dst, dstofs) {
    const src1r = src1ofs + src1len | 0;
    const src2r = src2ofs + src2len | 0;
    let _i1 = src1ofs;
    let _s1 = Caml_array.get(a, src1ofs);
    let _i2 = src2ofs;
    let _s2 = Caml_array.get(src2, src2ofs);
    let _d = dstofs;
    while(true) {
      const d = _d;
      const s2 = _s2;
      const i2 = _i2;
      const s1 = _s1;
      const i1 = _i1;
      if (Curry._2(cmp, s1, s2) <= 0) {
        Caml_array.set(dst, d, s1);
        const i1$1 = i1 + 1 | 0;
        if (i1$1 >= src1r) {
          return blit(src2, i2, dst, d + 1 | 0, src2r - i2 | 0);
        }
        _d = d + 1 | 0;
        _s1 = Caml_array.get(a, i1$1);
        _i1 = i1$1;
        continue ;
      }
      Caml_array.set(dst, d, s2);
      const i2$1 = i2 + 1 | 0;
      if (i2$1 >= src2r) {
        return blit(a, i1, dst, d + 1 | 0, src1r - i1 | 0);
      }
      _d = d + 1 | 0;
      _s2 = Caml_array.get(src2, i2$1);
      _i2 = i2$1;
      continue ;
    };
  };
  const isortto = function (srcofs, dst, dstofs, len) {
    for(let i = 0; i < len; ++i){
      const e = Caml_array.get(a, srcofs + i | 0);
      let j = (dstofs + i | 0) - 1 | 0;
      while(j >= dstofs && Curry._2(cmp, Caml_array.get(dst, j), e) > 0) {
        Caml_array.set(dst, j + 1 | 0, Caml_array.get(dst, j));
        j = j - 1 | 0;
      };
      Caml_array.set(dst, j + 1 | 0, e);
    }
  };
  const sortto = function (srcofs, dst, dstofs, len) {
    if (len <= 5) {
      return isortto(srcofs, dst, dstofs, len);
    }
    const l1 = len / 2 | 0;
    const l2 = len - l1 | 0;
    sortto(srcofs + l1 | 0, dst, dstofs + l1 | 0, l2);
    sortto(srcofs, a, srcofs + l2 | 0, l1);
    merge(srcofs + l2 | 0, l1, dst, dstofs + l1 | 0, l2, dst, dstofs);
  };
  const l = a.length;
  if (l <= 5) {
    return isortto(0, a, 0, l);
  }
  const l1 = l / 2 | 0;
  const l2 = l - l1 | 0;
  const t = Caml_array.make(l2, Caml_array.get(a, 0));
  sortto(l1, t, 0, l2);
  sortto(0, a, l2, l1);
  merge(l2, l1, t, 0, l2, a, 0);
}

function shuffle(rand, a) {
  for(let i = a.length - 1 | 0; i >= 1; --i){
    const j = Curry._1(rand, i + 1 | 0);
    const v = a[i];
    a[i] = Caml_array.get(a, j);
    a[j] = v;
  }
}

function to_seq(a) {
  const aux = function (i, param) {
    if (i >= a.length) {
      return /* Nil */0;
    }
    const x = a[i];
    const partial_arg = i + 1 | 0;
    return /* Cons */{
            _0: x,
            _1: (function (param) {
                return aux(partial_arg, param);
              })
          };
  };
  return function (param) {
    return aux(0, param);
  };
}

function to_seqi(a) {
  const aux = function (i, param) {
    if (i >= a.length) {
      return /* Nil */0;
    }
    const x = a[i];
    const partial_arg = i + 1 | 0;
    return /* Cons */{
            _0: [
              i,
              x
            ],
            _1: (function (param) {
                return aux(partial_arg, param);
              })
          };
  };
  return function (param) {
    return aux(0, param);
  };
}

function of_seq(i) {
  let l = Stdlib__Seq.fold_left((function (acc, x) {
          return {
                  hd: x,
                  tl: acc
                };
        }), /* [] */0, i);
  if (!l) {
    return [];
  }
  const len = list_length(0, l);
  const a = Caml_array.make(len, l.hd);
  let _i = len - 2 | 0;
  let _param = l.tl;
  while(true) {
    const param = _param;
    const i$1 = _i;
    if (!param) {
      return a;
    }
    a[i$1] = param.hd;
    _param = param.tl;
    _i = i$1 - 1 | 0;
    continue ;
  };
}

const concat = Caml_array.concat;

const fast_sort = stable_sort;

export {
  init ,
  make_matrix ,
  init_matrix ,
  append ,
  concat ,
  sub ,
  copy ,
  fill ,
  blit ,
  to_list ,
  of_list ,
  iter ,
  iteri ,
  map ,
  map_inplace ,
  mapi ,
  mapi_inplace ,
  fold_left ,
  fold_left_map ,
  fold_right ,
  iter2 ,
  map2 ,
  for_all ,
  exists ,
  for_all2 ,
  exists2 ,
  mem ,
  memq ,
  find_opt ,
  find_index ,
  find_map ,
  find_mapi ,
  split ,
  combine ,
  sort ,
  stable_sort ,
  fast_sort ,
  shuffle ,
  to_seq ,
  to_seqi ,
  of_seq ,
  Floatarray ,
}
/* No side effect */
