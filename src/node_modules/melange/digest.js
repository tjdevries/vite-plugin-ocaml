// Generated by Melange

import * as Caml_bytes from "melange.js/caml_bytes.js";
import * as Caml_external_polyfill from "melange.js/caml_external_polyfill.js";
import * as Caml_js_exceptions from "melange.js/caml_js_exceptions.js";
import * as Caml_md5 from "melange.js/caml_md5.js";
import * as Caml_string from "melange.js/caml_string.js";
import * as Stdlib from "./stdlib.js";
import * as Stdlib__Bytes from "./bytes.js";
import * as Stdlib__Char from "./char.js";
import * as Stdlib__In_channel from "./in_channel.js";
import * as Stdlib__Int from "./int.js";
import * as Stdlib__String from "./string.js";

function hex_of_string(d) {
  const char_hex = function (n) {
    return Stdlib__Char.chr(n < 10 ? /* '0' */48 + n | 0 : (/* 'a' */97 + n | 0) - 10 | 0);
  };
  const len = d.length;
  const result = Caml_bytes.caml_create_bytes((len << 1));
  for(let i = 0; i < len; ++i){
    const x = Caml_string.get(d, i);
    result[(i << 1)] = char_hex((x >>> 4));
    result[(i << 1) + 1 | 0] = char_hex(x & 15);
  }
  return Caml_bytes.bytes_to_string(result);
}

function string_of_hex(s) {
  const digit = function (c) {
    if (c >= 65) {
      if (c >= 97) {
        if (c >= 103) {
          throw new Caml_js_exceptions.MelangeError("Invalid_argument", {
                    MEL_EXN_ID: "Invalid_argument",
                    _1: "Digest.of_hex"
                  });
        }
        return (c - /* 'a' */97 | 0) + 10 | 0;
      }
      if (c >= 71) {
        throw new Caml_js_exceptions.MelangeError("Invalid_argument", {
                  MEL_EXN_ID: "Invalid_argument",
                  _1: "Digest.of_hex"
                });
      }
      return (c - /* 'A' */65 | 0) + 10 | 0;
    }
    if (c > 57 || c < 48) {
      throw new Caml_js_exceptions.MelangeError("Invalid_argument", {
                MEL_EXN_ID: "Invalid_argument",
                _1: "Digest.of_hex"
              });
    }
    return c - /* '0' */48 | 0;
  };
  const $$byte = function (i) {
    return (digit(Caml_string.get(s, i)) << 4) + digit(Caml_string.get(s, i + 1 | 0)) | 0;
  };
  const f = function (i) {
    return Stdlib__Char.chr($$byte((i << 1)));
  };
  const n = (s.length >> 1);
  return Caml_bytes.bytes_to_string(Stdlib__Bytes.init(n, f));
}

function string(str) {
  return Caml_external_polyfill.resolve("caml_blake2_string")(16, "", str, 0, str.length);
}

function bytes(b) {
  return string(Caml_bytes.bytes_to_string(b));
}

function substring(str, ofs, len) {
  if (ofs < 0 || len < 0 || ofs > (str.length - len | 0)) {
    throw new Caml_js_exceptions.MelangeError("Invalid_argument", {
              MEL_EXN_ID: "Invalid_argument",
              _1: "Digest.substring"
            });
  }
  return Caml_external_polyfill.resolve("caml_blake2_string")(16, "", str, ofs, len);
}

function subbytes(b, ofs, len) {
  return substring(Caml_bytes.bytes_to_string(b), ofs, len);
}

function channel(ic, toread) {
  const buf = Caml_bytes.caml_create_bytes(4096);
  const ctx = Caml_external_polyfill.resolve("caml_blake2_create")(16, "");
  if (toread < 0) {
    let _param;
    while(true) {
      const n = Stdlib__In_channel.input(ic, buf, 0, 4096);
      if (n === 0) {
        return Caml_external_polyfill.resolve("caml_blake2_final")(ctx, 16);
      }
      Caml_external_polyfill.resolve("caml_blake2_update")(ctx, Caml_bytes.bytes_to_string(buf), 0, n);
      _param = undefined;
      continue ;
    };
  }
  let _toread = toread;
  while(true) {
    const toread$1 = _toread;
    if (toread$1 === 0) {
      return Caml_external_polyfill.resolve("caml_blake2_final")(ctx, 16);
    }
    const n$1 = Stdlib__In_channel.input(ic, buf, 0, Stdlib__Int.min(4096, toread$1));
    if (n$1 === 0) {
      throw new Caml_js_exceptions.MelangeError(Stdlib.End_of_file, {
                MEL_EXN_ID: Stdlib.End_of_file
              });
    }
    Caml_external_polyfill.resolve("caml_blake2_update")(ctx, Caml_bytes.bytes_to_string(buf), 0, n$1);
    _toread = toread$1 - n$1 | 0;
    continue ;
  };
}

function file(filename) {
  return Stdlib__In_channel.with_open_bin(filename, (function (ic) {
                return channel(ic, -1);
              }));
}

const output = Stdlib.output_string;

function input(chan) {
  return Stdlib.really_input_string(chan, 16);
}

function to_hex(d) {
  if (d.length !== 16) {
    throw new Caml_js_exceptions.MelangeError("Invalid_argument", {
              MEL_EXN_ID: "Invalid_argument",
              _1: "Digest.to_hex"
            });
  }
  return hex_of_string(d);
}

function of_hex(s) {
  if (s.length !== 32) {
    throw new Caml_js_exceptions.MelangeError("Invalid_argument", {
              MEL_EXN_ID: "Invalid_argument",
              _1: "Digest.of_hex"
            });
  }
  return string_of_hex(s);
}

const BLAKE128 = {
  hash_length: 16,
  compare: Stdlib__String.compare,
  equal: Stdlib__String.equal,
  string: string,
  bytes: bytes,
  substring: substring,
  subbytes: subbytes,
  channel: channel,
  file: file,
  output: output,
  input: input,
  to_hex: to_hex,
  of_hex: of_hex
};

function string$1(str) {
  return Caml_external_polyfill.resolve("caml_blake2_string")(32, "", str, 0, str.length);
}

function bytes$1(b) {
  return string$1(Caml_bytes.bytes_to_string(b));
}

function substring$1(str, ofs, len) {
  if (ofs < 0 || len < 0 || ofs > (str.length - len | 0)) {
    throw new Caml_js_exceptions.MelangeError("Invalid_argument", {
              MEL_EXN_ID: "Invalid_argument",
              _1: "Digest.substring"
            });
  }
  return Caml_external_polyfill.resolve("caml_blake2_string")(32, "", str, ofs, len);
}

function subbytes$1(b, ofs, len) {
  return substring$1(Caml_bytes.bytes_to_string(b), ofs, len);
}

function channel$1(ic, toread) {
  const buf = Caml_bytes.caml_create_bytes(4096);
  const ctx = Caml_external_polyfill.resolve("caml_blake2_create")(32, "");
  if (toread < 0) {
    let _param;
    while(true) {
      const n = Stdlib__In_channel.input(ic, buf, 0, 4096);
      if (n === 0) {
        return Caml_external_polyfill.resolve("caml_blake2_final")(ctx, 32);
      }
      Caml_external_polyfill.resolve("caml_blake2_update")(ctx, Caml_bytes.bytes_to_string(buf), 0, n);
      _param = undefined;
      continue ;
    };
  }
  let _toread = toread;
  while(true) {
    const toread$1 = _toread;
    if (toread$1 === 0) {
      return Caml_external_polyfill.resolve("caml_blake2_final")(ctx, 32);
    }
    const n$1 = Stdlib__In_channel.input(ic, buf, 0, Stdlib__Int.min(4096, toread$1));
    if (n$1 === 0) {
      throw new Caml_js_exceptions.MelangeError(Stdlib.End_of_file, {
                MEL_EXN_ID: Stdlib.End_of_file
              });
    }
    Caml_external_polyfill.resolve("caml_blake2_update")(ctx, Caml_bytes.bytes_to_string(buf), 0, n$1);
    _toread = toread$1 - n$1 | 0;
    continue ;
  };
}

function file$1(filename) {
  return Stdlib__In_channel.with_open_bin(filename, (function (ic) {
                return channel$1(ic, -1);
              }));
}

const output$1 = Stdlib.output_string;

function input$1(chan) {
  return Stdlib.really_input_string(chan, 32);
}

function to_hex$1(d) {
  if (d.length !== 32) {
    throw new Caml_js_exceptions.MelangeError("Invalid_argument", {
              MEL_EXN_ID: "Invalid_argument",
              _1: "Digest.to_hex"
            });
  }
  return hex_of_string(d);
}

function of_hex$1(s) {
  if (s.length !== 64) {
    throw new Caml_js_exceptions.MelangeError("Invalid_argument", {
              MEL_EXN_ID: "Invalid_argument",
              _1: "Digest.of_hex"
            });
  }
  return string_of_hex(s);
}

const BLAKE256 = {
  hash_length: 32,
  compare: Stdlib__String.compare,
  equal: Stdlib__String.equal,
  string: string$1,
  bytes: bytes$1,
  substring: substring$1,
  subbytes: subbytes$1,
  channel: channel$1,
  file: file$1,
  output: output$1,
  input: input$1,
  to_hex: to_hex$1,
  of_hex: of_hex$1
};

function string$2(str) {
  return Caml_external_polyfill.resolve("caml_blake2_string")(64, "", str, 0, str.length);
}

function bytes$2(b) {
  return string$2(Caml_bytes.bytes_to_string(b));
}

function substring$2(str, ofs, len) {
  if (ofs < 0 || len < 0 || ofs > (str.length - len | 0)) {
    throw new Caml_js_exceptions.MelangeError("Invalid_argument", {
              MEL_EXN_ID: "Invalid_argument",
              _1: "Digest.substring"
            });
  }
  return Caml_external_polyfill.resolve("caml_blake2_string")(64, "", str, ofs, len);
}

function subbytes$2(b, ofs, len) {
  return substring$2(Caml_bytes.bytes_to_string(b), ofs, len);
}

function channel$2(ic, toread) {
  const buf = Caml_bytes.caml_create_bytes(4096);
  const ctx = Caml_external_polyfill.resolve("caml_blake2_create")(64, "");
  if (toread < 0) {
    let _param;
    while(true) {
      const n = Stdlib__In_channel.input(ic, buf, 0, 4096);
      if (n === 0) {
        return Caml_external_polyfill.resolve("caml_blake2_final")(ctx, 64);
      }
      Caml_external_polyfill.resolve("caml_blake2_update")(ctx, Caml_bytes.bytes_to_string(buf), 0, n);
      _param = undefined;
      continue ;
    };
  }
  let _toread = toread;
  while(true) {
    const toread$1 = _toread;
    if (toread$1 === 0) {
      return Caml_external_polyfill.resolve("caml_blake2_final")(ctx, 64);
    }
    const n$1 = Stdlib__In_channel.input(ic, buf, 0, Stdlib__Int.min(4096, toread$1));
    if (n$1 === 0) {
      throw new Caml_js_exceptions.MelangeError(Stdlib.End_of_file, {
                MEL_EXN_ID: Stdlib.End_of_file
              });
    }
    Caml_external_polyfill.resolve("caml_blake2_update")(ctx, Caml_bytes.bytes_to_string(buf), 0, n$1);
    _toread = toread$1 - n$1 | 0;
    continue ;
  };
}

function file$2(filename) {
  return Stdlib__In_channel.with_open_bin(filename, (function (ic) {
                return channel$2(ic, -1);
              }));
}

const output$2 = Stdlib.output_string;

function input$2(chan) {
  return Stdlib.really_input_string(chan, 64);
}

function to_hex$2(d) {
  if (d.length !== 64) {
    throw new Caml_js_exceptions.MelangeError("Invalid_argument", {
              MEL_EXN_ID: "Invalid_argument",
              _1: "Digest.to_hex"
            });
  }
  return hex_of_string(d);
}

function of_hex$2(s) {
  if (s.length !== 128) {
    throw new Caml_js_exceptions.MelangeError("Invalid_argument", {
              MEL_EXN_ID: "Invalid_argument",
              _1: "Digest.of_hex"
            });
  }
  return string_of_hex(s);
}

const BLAKE512 = {
  hash_length: 64,
  compare: Stdlib__String.compare,
  equal: Stdlib__String.equal,
  string: string$2,
  bytes: bytes$2,
  substring: substring$2,
  subbytes: subbytes$2,
  channel: channel$2,
  file: file$2,
  output: output$2,
  input: input$2,
  to_hex: to_hex$2,
  of_hex: of_hex$2
};

function string$3(str) {
  return Caml_md5.caml_md5_string(str, 0, str.length);
}

function bytes$3(b) {
  return string$3(Caml_bytes.bytes_to_string(b));
}

function substring$3(str, ofs, len) {
  if (ofs < 0 || len < 0 || ofs > (str.length - len | 0)) {
    throw new Caml_js_exceptions.MelangeError("Invalid_argument", {
              MEL_EXN_ID: "Invalid_argument",
              _1: "Digest.substring"
            });
  }
  return Caml_md5.caml_md5_string(str, ofs, len);
}

function subbytes$3(b, ofs, len) {
  return substring$3(Caml_bytes.bytes_to_string(b), ofs, len);
}

function file$3(filename) {
  return Stdlib__In_channel.with_open_bin(filename, (function (ic) {
                return Caml_external_polyfill.resolve("caml_md5_chan")(ic, -1);
              }));
}

const output$3 = Stdlib.output_string;

function input$3(chan) {
  return Stdlib.really_input_string(chan, 16);
}

function to_hex$3(d) {
  if (d.length !== 16) {
    throw new Caml_js_exceptions.MelangeError("Invalid_argument", {
              MEL_EXN_ID: "Invalid_argument",
              _1: "Digest.to_hex"
            });
  }
  return hex_of_string(d);
}

function of_hex$3(s) {
  if (s.length !== 32) {
    throw new Caml_js_exceptions.MelangeError("Invalid_argument", {
              MEL_EXN_ID: "Invalid_argument",
              _1: "Digest.from_hex"
            });
  }
  return string_of_hex(s);
}

const compare = Stdlib__String.compare;

const equal = Stdlib__String.equal;

function channel$3(prim0, prim1) {
  return Caml_external_polyfill.resolve("caml_md5_chan")(prim0, prim1);
}

const from_hex = of_hex$3;

function MD5_channel(prim0, prim1) {
  return Caml_external_polyfill.resolve("caml_md5_chan")(prim0, prim1);
}

const MD5 = {
  hash_length: 16,
  compare: Stdlib__String.compare,
  equal: Stdlib__String.equal,
  string: string$3,
  bytes: bytes$3,
  substring: substring$3,
  subbytes: subbytes$3,
  channel: MD5_channel,
  file: file$3,
  output: output$3,
  input: input$3,
  to_hex: to_hex$3,
  of_hex: of_hex$3
};

export {
  compare ,
  equal ,
  string$3 as string,
  bytes$3 as bytes,
  substring$3 as substring,
  subbytes$3 as subbytes,
  channel$3 as channel,
  file$3 as file,
  output$3 as output,
  input$3 as input,
  to_hex$3 as to_hex,
  of_hex$3 as of_hex,
  from_hex ,
  BLAKE128 ,
  BLAKE256 ,
  BLAKE512 ,
  MD5 ,
}
/* Stdlib__In_channel Not a pure module */
