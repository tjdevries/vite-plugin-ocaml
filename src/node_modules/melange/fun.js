// Generated by Melange

import * as Caml_exceptions from "melange.js/caml_exceptions.js";
import * as Caml_external_polyfill from "melange.js/caml_external_polyfill.js";
import * as Caml_js_exceptions from "melange.js/caml_js_exceptions.js";
import * as Curry from "melange.js/curry.js";
import * as Stdlib__Printexc from "./printexc.js";

function $$const(c, param) {
  return c;
}

function compose(f, g, x) {
  return Curry._1(f, Curry._1(g, x));
}

function flip(f, x, y) {
  return Curry._2(f, y, x);
}

function negate(p, v) {
  return !Curry._1(p, v);
}

const Finally_raised = /* @__PURE__ */Caml_exceptions.create("Stdlib.Fun.Finally_raised");

Stdlib__Printexc.register_printer(function (exn) {
      if (exn.MEL_EXN_ID === Finally_raised) {
        return "Fun.Finally_raised: " + Stdlib__Printexc.to_string(exn._1);
      }
      
    });

function protect($$finally, work) {
  const finally_no_exn = function (param) {
    try {
      return Curry._1($$finally, undefined);
    }
    catch (raw_e){
      const e = Caml_js_exceptions.internalToOCamlException(raw_e);
      let bt;
      const exn = {
        MEL_EXN_ID: Finally_raised,
        _1: e
      };
      Caml_external_polyfill.resolve("caml_restore_raw_backtrace")(exn, bt);
      throw new Caml_js_exceptions.MelangeError(exn.MEL_EXN_ID, exn);
    }
  };
  let result;
  try {
    result = Curry._1(work, undefined);
  }
  catch (raw_work_exn){
    const work_exn = Caml_js_exceptions.internalToOCamlException(raw_work_exn);
    let work_bt;
    finally_no_exn(undefined);
    Caml_external_polyfill.resolve("caml_restore_raw_backtrace")(work_exn, work_bt);
    throw new Caml_js_exceptions.MelangeError(work_exn.MEL_EXN_ID, work_exn);
  }
  finally_no_exn(undefined);
  return result;
}

export {
  $$const ,
  compose ,
  flip ,
  negate ,
  protect ,
  Finally_raised ,
}
/*  Not a pure module */
