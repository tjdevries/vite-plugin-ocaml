// Generated by Melange

import * as Caml_array from "melange.js/caml_array.js";
import * as Caml_hash from "melange.js/caml_hash.js";
import * as Caml_js_exceptions from "melange.js/caml_js_exceptions.js";
import * as Caml_obj from "melange.js/caml_obj.js";
import * as Caml_option from "melange.js/caml_option.js";
import * as Curry from "melange.js/curry.js";
import * as Stdlib from "./stdlib.js";
import * as Stdlib__Array from "./array.js";
import * as Stdlib__Atomic from "./atomic.js";
import * as Stdlib__Domain from "./domain.js";
import * as Stdlib__Int from "./int.js";
import * as Stdlib__Random from "./random.js";
import * as Stdlib__Seq from "./seq.js";

function flip_ongoing_traversal(h) {
  h.initial_size = -h.initial_size | 0;
}

const randomized = Stdlib__Atomic.make(false);

function randomize(param) {
  Stdlib__Atomic.set(randomized, true);
}

function is_randomized(param) {
  return Stdlib__Atomic.get(randomized);
}

const prng_key = Stdlib__Domain.DLS.new_key(undefined, Stdlib__Random.State.make_self_init);

function power_2_above(_x, n) {
  while(true) {
    const x = _x;
    if (x >= n) {
      return x;
    }
    if ((x << 1) < x) {
      return x;
    }
    _x = (x << 1);
    continue ;
  };
}

function create(randomOpt, initial_size) {
  const random = randomOpt !== undefined ? randomOpt : Stdlib__Atomic.get(randomized);
  const s = power_2_above(16, initial_size);
  const seed = random ? Stdlib__Random.State.bits(Stdlib__Domain.DLS.get(prng_key)) : 0;
  return {
          size: 0,
          data: Caml_array.make(s, /* Empty */0),
          seed: seed,
          initial_size: s
        };
}

function clear(h) {
  if (h.size > 0) {
    h.size = 0;
    return Stdlib__Array.fill(h.data, 0, h.data.length, /* Empty */0);
  }
  
}

function reset(h) {
  const len = h.data.length;
  if (len === Stdlib.abs(h.initial_size)) {
    return clear(h);
  } else {
    h.size = 0;
    h.data = Caml_array.make(Stdlib.abs(h.initial_size), /* Empty */0);
    return ;
  }
}

function copy_bucketlist(param) {
  if (!param) {
    return /* Empty */0;
  }
  const key = param.key;
  const data = param.data;
  const next = param.next;
  const loop = function (_prec, _param) {
    while(true) {
      const param = _param;
      const prec = _prec;
      if (!param) {
        return ;
      }
      const key = param.key;
      const data = param.data;
      const next = param.next;
      const r = /* Cons */{
        key: key,
        data: data,
        next: next
      };
      if (prec) {
        prec.next = r;
      } else {
        throw new Caml_js_exceptions.MelangeError("Assert_failure", {
                  MEL_EXN_ID: "Assert_failure",
                  _1: [
                    "hashtbl.cppo.ml",
                    110,
                    23
                  ]
                });
      }
      _param = next;
      _prec = r;
      continue ;
    };
  };
  const r = /* Cons */{
    key: key,
    data: data,
    next: next
  };
  loop(r, next);
  return r;
}

function copy(h) {
  return {
          size: h.size,
          data: Stdlib__Array.map(copy_bucketlist, h.data),
          seed: h.seed,
          initial_size: h.initial_size
        };
}

function length(h) {
  return h.size;
}

function insert_all_buckets(indexfun, inplace, odata, ndata) {
  const nsize = ndata.length;
  const ndata_tail = Caml_array.make(nsize, /* Empty */0);
  const insert_bucket = function (_cell) {
    while(true) {
      const cell = _cell;
      if (!cell) {
        return ;
      }
      const key = cell.key;
      const data = cell.data;
      const next = cell.next;
      const cell$1 = inplace ? cell : /* Cons */({
            key: key,
            data: data,
            next: /* Empty */0
          });
      const nidx = Curry._1(indexfun, key);
      const tail = Caml_array.get(ndata_tail, nidx);
      if (tail) {
        tail.next = cell$1;
      } else {
        Caml_array.set(ndata, nidx, cell$1);
      }
      Caml_array.set(ndata_tail, nidx, cell$1);
      _cell = next;
      continue ;
    };
  };
  for(let i = 0 ,i_finish = odata.length; i < i_finish; ++i){
    insert_bucket(Caml_array.get(odata, i));
  }
  if (!inplace) {
    return ;
  }
  for(let i$1 = 0; i$1 < nsize; ++i$1){
    const tail = Caml_array.get(ndata_tail, i$1);
    if (tail) {
      tail.next = /* Empty */0;
    }
    
  }
}

function resize(indexfun, h) {
  const odata = h.data;
  const osize = odata.length;
  const nsize = (osize << 1);
  if (nsize < osize) {
    return ;
  }
  const ndata = Caml_array.make(nsize, /* Empty */0);
  const inplace = h.initial_size >= 0;
  h.data = ndata;
  insert_all_buckets(Curry._1(indexfun, h), inplace, odata, ndata);
}

function iter(f, h) {
  const do_bucket = function (_param) {
    while(true) {
      const param = _param;
      if (!param) {
        return ;
      }
      const key = param.key;
      const data = param.data;
      const next = param.next;
      Curry._2(f, key, data);
      _param = next;
      continue ;
    };
  };
  const old_trav = h.initial_size < 0;
  if (!old_trav) {
    flip_ongoing_traversal(h);
  }
  try {
    const d = h.data;
    for(let i = 0 ,i_finish = d.length; i < i_finish; ++i){
      do_bucket(Caml_array.get(d, i));
    }
    if (!old_trav) {
      return flip_ongoing_traversal(h);
    } else {
      return ;
    }
  }
  catch (exn){
    if (old_trav) {
      throw new Caml_js_exceptions.MelangeError(exn.MEL_EXN_ID, exn);
    }
    flip_ongoing_traversal(h);
    throw new Caml_js_exceptions.MelangeError(exn.MEL_EXN_ID, exn);
  }
}

function filter_map_inplace_bucket(f, h, i, _prec, _slot) {
  while(true) {
    const slot = _slot;
    const prec = _prec;
    if (!slot) {
      if (prec) {
        prec.next = /* Empty */0;
        return ;
      } else {
        return Caml_array.set(h.data, i, /* Empty */0);
      }
    }
    const key = slot.key;
    const data = slot.data;
    const next = slot.next;
    const data$1 = Curry._2(f, key, data);
    if (data$1 !== undefined) {
      if (prec) {
        prec.next = slot;
      } else {
        Caml_array.set(h.data, i, slot);
      }
      slot.data = Caml_option.valFromOption(data$1);
      _slot = next;
      _prec = slot;
      continue ;
    }
    h.size = h.size - 1 | 0;
    _slot = next;
    continue ;
  };
}

function filter_map_inplace(f, h) {
  const d = h.data;
  const old_trav = h.initial_size < 0;
  if (!old_trav) {
    flip_ongoing_traversal(h);
  }
  try {
    for(let i = 0 ,i_finish = d.length; i < i_finish; ++i){
      filter_map_inplace_bucket(f, h, i, /* Empty */0, Caml_array.get(h.data, i));
    }
    if (!old_trav) {
      return flip_ongoing_traversal(h);
    } else {
      return ;
    }
  }
  catch (exn){
    if (old_trav) {
      throw new Caml_js_exceptions.MelangeError(exn.MEL_EXN_ID, exn);
    }
    flip_ongoing_traversal(h);
    throw new Caml_js_exceptions.MelangeError(exn.MEL_EXN_ID, exn);
  }
}

function fold(f, h, init) {
  const do_bucket = function (_b, _accu) {
    while(true) {
      const accu = _accu;
      const b = _b;
      if (!b) {
        return accu;
      }
      const key = b.key;
      const data = b.data;
      const next = b.next;
      _accu = Curry._3(f, key, data, accu);
      _b = next;
      continue ;
    };
  };
  const old_trav = h.initial_size < 0;
  if (!old_trav) {
    flip_ongoing_traversal(h);
  }
  try {
    const d = h.data;
    let accu = init;
    for(let i = 0 ,i_finish = d.length; i < i_finish; ++i){
      accu = do_bucket(Caml_array.get(d, i), accu);
    }
    if (!old_trav) {
      flip_ongoing_traversal(h);
    }
    return accu;
  }
  catch (exn){
    if (old_trav) {
      throw new Caml_js_exceptions.MelangeError(exn.MEL_EXN_ID, exn);
    }
    flip_ongoing_traversal(h);
    throw new Caml_js_exceptions.MelangeError(exn.MEL_EXN_ID, exn);
  }
}

function bucket_length(_accu, _param) {
  while(true) {
    const param = _param;
    const accu = _accu;
    if (!param) {
      return accu;
    }
    const next = param.next;
    _param = next;
    _accu = accu + 1 | 0;
    continue ;
  };
}

function stats(h) {
  const mbl = Stdlib__Array.fold_left((function (m, b) {
          return Stdlib__Int.max(m, bucket_length(0, b));
        }), 0, h.data);
  const histo = Caml_array.make(mbl + 1 | 0, 0);
  Stdlib__Array.iter((function (b) {
          const l = bucket_length(0, b);
          Caml_array.set(histo, l, Caml_array.get(histo, l) + 1 | 0);
        }), h.data);
  return {
          num_bindings: h.size,
          num_buckets: h.data.length,
          max_bucket_length: mbl,
          bucket_histogram: histo
        };
}

function to_seq(tbl) {
  const tbl_data = tbl.data;
  const aux = function (_i, _buck, _param) {
    while(true) {
      const buck = _buck;
      const i = _i;
      if (buck) {
        const key = buck.key;
        const data = buck.data;
        const next = buck.next;
        return /* Cons */{
                _0: [
                  key,
                  data
                ],
                _1: (function (param) {
                    return aux(i, next, param);
                  })
              };
      }
      if (i === tbl_data.length) {
        return /* Nil */0;
      }
      _param = undefined;
      _buck = Caml_array.get(tbl_data, i);
      _i = i + 1 | 0;
      continue ;
    };
  };
  return function (param) {
    return aux(0, /* Empty */0, param);
  };
}

function to_seq_keys(m) {
  const partial_arg = to_seq(m);
  return function (param) {
    return Stdlib__Seq.map((function (prim) {
                  return prim[0];
                }), partial_arg, param);
  };
}

function to_seq_values(m) {
  const partial_arg = to_seq(m);
  return function (param) {
    return Stdlib__Seq.map((function (prim) {
                  return prim[1];
                }), partial_arg, param);
  };
}

function MakeSeeded(H) {
  const key_index = function (h, key) {
    return Curry._2(H.seeded_hash, h.seed, key) & (h.data.length - 1 | 0);
  };
  const add = function (h, key, data) {
    const i = key_index(h, key);
    const bucket = /* Cons */{
      key: key,
      data: data,
      next: Caml_array.get(h.data, i)
    };
    Caml_array.set(h.data, i, bucket);
    h.size = h.size + 1 | 0;
    if (h.size > (h.data.length << 1)) {
      return resize(key_index, h);
    }
    
  };
  const remove = function (h, key) {
    const i = key_index(h, key);
    let _prec = /* Empty */0;
    let _c = Caml_array.get(h.data, i);
    while(true) {
      const c = _c;
      const prec = _prec;
      if (!c) {
        return ;
      }
      const k = c.key;
      const next = c.next;
      if (Curry._2(H.equal, k, key)) {
        h.size = h.size - 1 | 0;
        if (prec) {
          prec.next = next;
          return ;
        } else {
          return Caml_array.set(h.data, i, next);
        }
      }
      _c = next;
      _prec = c;
      continue ;
    };
  };
  const find = function (h, key) {
    const match = Caml_array.get(h.data, key_index(h, key));
    if (match) {
      const k1 = match.key;
      const d1 = match.data;
      const next1 = match.next;
      if (Curry._2(H.equal, key, k1)) {
        return d1;
      }
      if (next1) {
        const k2 = next1.key;
        const d2 = next1.data;
        const next2 = next1.next;
        if (Curry._2(H.equal, key, k2)) {
          return d2;
        }
        if (next2) {
          const k3 = next2.key;
          const d3 = next2.data;
          const next3 = next2.next;
          if (Curry._2(H.equal, key, k3)) {
            return d3;
          } else {
            let _param = next3;
            while(true) {
              const param = _param;
              if (param) {
                const k = param.key;
                const data = param.data;
                const next = param.next;
                if (Curry._2(H.equal, key, k)) {
                  return data;
                }
                _param = next;
                continue ;
              }
              throw new Caml_js_exceptions.MelangeError(Stdlib.Not_found, {
                        MEL_EXN_ID: Stdlib.Not_found
                      });
            };
          }
        }
        throw new Caml_js_exceptions.MelangeError(Stdlib.Not_found, {
                  MEL_EXN_ID: Stdlib.Not_found
                });
      }
      throw new Caml_js_exceptions.MelangeError(Stdlib.Not_found, {
                MEL_EXN_ID: Stdlib.Not_found
              });
    }
    throw new Caml_js_exceptions.MelangeError(Stdlib.Not_found, {
              MEL_EXN_ID: Stdlib.Not_found
            });
  };
  const find_opt = function (h, key) {
    const match = Caml_array.get(h.data, key_index(h, key));
    if (!match) {
      return ;
    }
    const k1 = match.key;
    const d1 = match.data;
    const next1 = match.next;
    if (Curry._2(H.equal, key, k1)) {
      return Caml_option.some(d1);
    }
    if (!next1) {
      return ;
    }
    const k2 = next1.key;
    const d2 = next1.data;
    const next2 = next1.next;
    if (Curry._2(H.equal, key, k2)) {
      return Caml_option.some(d2);
    }
    if (!next2) {
      return ;
    }
    const k3 = next2.key;
    const d3 = next2.data;
    const next3 = next2.next;
    if (Curry._2(H.equal, key, k3)) {
      return Caml_option.some(d3);
    } else {
      let _param = next3;
      while(true) {
        const param = _param;
        if (!param) {
          return ;
        }
        const k = param.key;
        const data = param.data;
        const next = param.next;
        if (Curry._2(H.equal, key, k)) {
          return Caml_option.some(data);
        }
        _param = next;
        continue ;
      };
    }
  };
  const find_all = function (h, key) {
    const find_in_bucket_dps = function (_dst, _offset, _param) {
      while(true) {
        const dst = _dst;
        const offset = _offset;
        const param = _param;
        if (!param) {
          dst[offset] = /* [] */0;
          return ;
        }
        const k = param.key;
        const d = param.data;
        const next = param.next;
        if (Curry._2(H.equal, k, key)) {
          const block = {
            hd: d,
            tl: 24029
          };
          dst[offset] = block;
          _param = next;
          _offset = "tl";
          _dst = block;
          continue ;
        }
        _param = next;
        continue ;
      };
    };
    let _param = Caml_array.get(h.data, key_index(h, key));
    while(true) {
      const param = _param;
      if (!param) {
        return /* [] */0;
      }
      const k = param.key;
      const d = param.data;
      const next = param.next;
      if (Curry._2(H.equal, k, key)) {
        const block = {
          hd: d,
          tl: 24029
        };
        find_in_bucket_dps(block, "tl", next);
        return block;
      }
      _param = next;
      continue ;
    };
  };
  const replace_bucket = function (key, data, _slot) {
    while(true) {
      const slot = _slot;
      if (!slot) {
        return true;
      }
      const k = slot.key;
      const next = slot.next;
      if (Curry._2(H.equal, k, key)) {
        slot.key = key;
        slot.data = data;
        return false;
      }
      _slot = next;
      continue ;
    };
  };
  const replace = function (h, key, data) {
    const i = key_index(h, key);
    const l = Caml_array.get(h.data, i);
    if (replace_bucket(key, data, l)) {
      Caml_array.set(h.data, i, /* Cons */{
            key: key,
            data: data,
            next: l
          });
      h.size = h.size + 1 | 0;
      if (h.size > (h.data.length << 1)) {
        return resize(key_index, h);
      } else {
        return ;
      }
    }
    
  };
  const mem = function (h, key) {
    let _param = Caml_array.get(h.data, key_index(h, key));
    while(true) {
      const param = _param;
      if (!param) {
        return false;
      }
      const k = param.key;
      const next = param.next;
      if (Curry._2(H.equal, k, key)) {
        return true;
      }
      _param = next;
      continue ;
    };
  };
  const add_seq = function (tbl, i) {
    Stdlib__Seq.iter((function (param) {
            add(tbl, param[0], param[1]);
          }), i);
  };
  const replace_seq = function (tbl, i) {
    Stdlib__Seq.iter((function (param) {
            replace(tbl, param[0], param[1]);
          }), i);
  };
  const of_seq = function (i) {
    const tbl = create(undefined, 16);
    replace_seq(tbl, i);
    return tbl;
  };
  return {
          create: create,
          clear: clear,
          reset: reset,
          copy: copy,
          add: add,
          remove: remove,
          find: find,
          find_opt: find_opt,
          find_all: find_all,
          replace: replace,
          mem: mem,
          iter: iter,
          filter_map_inplace: filter_map_inplace,
          fold: fold,
          length: length,
          stats: stats,
          to_seq: to_seq,
          to_seq_keys: to_seq_keys,
          to_seq_values: to_seq_values,
          add_seq: add_seq,
          replace_seq: replace_seq,
          of_seq: of_seq
        };
}

function Make(H) {
  const equal = H.equal;
  const key_index = function (h, key) {
    return Curry._1(H.hash, key) & (h.data.length - 1 | 0);
  };
  const add = function (h, key, data) {
    const i = key_index(h, key);
    const bucket = /* Cons */{
      key: key,
      data: data,
      next: Caml_array.get(h.data, i)
    };
    Caml_array.set(h.data, i, bucket);
    h.size = h.size + 1 | 0;
    if (h.size > (h.data.length << 1)) {
      return resize(key_index, h);
    }
    
  };
  const remove = function (h, key) {
    const i = key_index(h, key);
    let _prec = /* Empty */0;
    let _c = Caml_array.get(h.data, i);
    while(true) {
      const c = _c;
      const prec = _prec;
      if (!c) {
        return ;
      }
      const k = c.key;
      const next = c.next;
      if (Curry._2(equal, k, key)) {
        h.size = h.size - 1 | 0;
        if (prec) {
          prec.next = next;
          return ;
        } else {
          return Caml_array.set(h.data, i, next);
        }
      }
      _c = next;
      _prec = c;
      continue ;
    };
  };
  const find = function (h, key) {
    const match = Caml_array.get(h.data, key_index(h, key));
    if (match) {
      const k1 = match.key;
      const d1 = match.data;
      const next1 = match.next;
      if (Curry._2(equal, key, k1)) {
        return d1;
      }
      if (next1) {
        const k2 = next1.key;
        const d2 = next1.data;
        const next2 = next1.next;
        if (Curry._2(equal, key, k2)) {
          return d2;
        }
        if (next2) {
          const k3 = next2.key;
          const d3 = next2.data;
          const next3 = next2.next;
          if (Curry._2(equal, key, k3)) {
            return d3;
          } else {
            let _param = next3;
            while(true) {
              const param = _param;
              if (param) {
                const k = param.key;
                const data = param.data;
                const next = param.next;
                if (Curry._2(equal, key, k)) {
                  return data;
                }
                _param = next;
                continue ;
              }
              throw new Caml_js_exceptions.MelangeError(Stdlib.Not_found, {
                        MEL_EXN_ID: Stdlib.Not_found
                      });
            };
          }
        }
        throw new Caml_js_exceptions.MelangeError(Stdlib.Not_found, {
                  MEL_EXN_ID: Stdlib.Not_found
                });
      }
      throw new Caml_js_exceptions.MelangeError(Stdlib.Not_found, {
                MEL_EXN_ID: Stdlib.Not_found
              });
    }
    throw new Caml_js_exceptions.MelangeError(Stdlib.Not_found, {
              MEL_EXN_ID: Stdlib.Not_found
            });
  };
  const find_opt = function (h, key) {
    const match = Caml_array.get(h.data, key_index(h, key));
    if (!match) {
      return ;
    }
    const k1 = match.key;
    const d1 = match.data;
    const next1 = match.next;
    if (Curry._2(equal, key, k1)) {
      return Caml_option.some(d1);
    }
    if (!next1) {
      return ;
    }
    const k2 = next1.key;
    const d2 = next1.data;
    const next2 = next1.next;
    if (Curry._2(equal, key, k2)) {
      return Caml_option.some(d2);
    }
    if (!next2) {
      return ;
    }
    const k3 = next2.key;
    const d3 = next2.data;
    const next3 = next2.next;
    if (Curry._2(equal, key, k3)) {
      return Caml_option.some(d3);
    } else {
      let _param = next3;
      while(true) {
        const param = _param;
        if (!param) {
          return ;
        }
        const k = param.key;
        const data = param.data;
        const next = param.next;
        if (Curry._2(equal, key, k)) {
          return Caml_option.some(data);
        }
        _param = next;
        continue ;
      };
    }
  };
  const find_all = function (h, key) {
    const find_in_bucket_dps = function (_dst, _offset, _param) {
      while(true) {
        const param = _param;
        const offset = _offset;
        const dst = _dst;
        if (!param) {
          dst[offset] = /* [] */0;
          return ;
        }
        const k = param.key;
        const d = param.data;
        const next = param.next;
        if (Curry._2(equal, k, key)) {
          const block = {
            hd: d,
            tl: 24029
          };
          dst[offset] = block;
          _param = next;
          _offset = "tl";
          _dst = block;
          continue ;
        }
        _param = next;
        continue ;
      };
    };
    let _param = Caml_array.get(h.data, key_index(h, key));
    while(true) {
      const param = _param;
      if (!param) {
        return /* [] */0;
      }
      const k = param.key;
      const d = param.data;
      const next = param.next;
      if (Curry._2(equal, k, key)) {
        const block = {
          hd: d,
          tl: 24029
        };
        find_in_bucket_dps(block, "tl", next);
        return block;
      }
      _param = next;
      continue ;
    };
  };
  const replace_bucket = function (key, data, _slot) {
    while(true) {
      const slot = _slot;
      if (!slot) {
        return true;
      }
      const k = slot.key;
      const next = slot.next;
      if (Curry._2(equal, k, key)) {
        slot.key = key;
        slot.data = data;
        return false;
      }
      _slot = next;
      continue ;
    };
  };
  const replace = function (h, key, data) {
    const i = key_index(h, key);
    const l = Caml_array.get(h.data, i);
    if (replace_bucket(key, data, l)) {
      Caml_array.set(h.data, i, /* Cons */{
            key: key,
            data: data,
            next: l
          });
      h.size = h.size + 1 | 0;
      if (h.size > (h.data.length << 1)) {
        return resize(key_index, h);
      } else {
        return ;
      }
    }
    
  };
  const mem = function (h, key) {
    let _param = Caml_array.get(h.data, key_index(h, key));
    while(true) {
      const param = _param;
      if (!param) {
        return false;
      }
      const k = param.key;
      const next = param.next;
      if (Curry._2(equal, k, key)) {
        return true;
      }
      _param = next;
      continue ;
    };
  };
  const add_seq = function (tbl, i) {
    Stdlib__Seq.iter((function (param) {
            add(tbl, param[0], param[1]);
          }), i);
  };
  const replace_seq = function (tbl, i) {
    Stdlib__Seq.iter((function (param) {
            replace(tbl, param[0], param[1]);
          }), i);
  };
  const create$1 = function (sz) {
    return create(false, sz);
  };
  const of_seq = function (i) {
    const tbl = create(false, 16);
    replace_seq(tbl, i);
    return tbl;
  };
  return {
          create: create$1,
          clear: clear,
          reset: reset,
          copy: copy,
          add: add,
          remove: remove,
          find: find,
          find_opt: find_opt,
          find_all: find_all,
          replace: replace,
          mem: mem,
          iter: iter,
          filter_map_inplace: filter_map_inplace,
          fold: fold,
          length: length,
          stats: stats,
          to_seq: to_seq,
          to_seq_keys: to_seq_keys,
          to_seq_values: to_seq_values,
          add_seq: add_seq,
          replace_seq: replace_seq,
          of_seq: of_seq
        };
}

function hash(x) {
  return Caml_hash.caml_hash(10, 100, 0, x);
}

function hash_param(n1, n2, x) {
  return Caml_hash.caml_hash(n1, n2, 0, x);
}

function seeded_hash(seed, x) {
  return Caml_hash.caml_hash(10, 100, seed, x);
}

function key_index(h, key) {
  return Caml_hash.caml_hash(10, 100, h.seed, key) & (h.data.length - 1 | 0);
}

function add(h, key, data) {
  const i = key_index(h, key);
  const bucket = /* Cons */{
    key: key,
    data: data,
    next: Caml_array.get(h.data, i)
  };
  Caml_array.set(h.data, i, bucket);
  h.size = h.size + 1 | 0;
  if (h.size > (h.data.length << 1)) {
    return resize(key_index, h);
  }
  
}

function remove(h, key) {
  const i = key_index(h, key);
  let _prec = /* Empty */0;
  let _c = Caml_array.get(h.data, i);
  while(true) {
    const c = _c;
    const prec = _prec;
    if (!c) {
      return ;
    }
    const k = c.key;
    const next = c.next;
    if (Caml_obj.caml_equal(k, key)) {
      h.size = h.size - 1 | 0;
      if (prec) {
        prec.next = next;
        return ;
      } else {
        return Caml_array.set(h.data, i, next);
      }
    }
    _c = next;
    _prec = c;
    continue ;
  };
}

function find(h, key) {
  const match = Caml_array.get(h.data, key_index(h, key));
  if (match) {
    const k1 = match.key;
    const d1 = match.data;
    const next1 = match.next;
    if (Caml_obj.caml_equal(key, k1)) {
      return d1;
    }
    if (next1) {
      const k2 = next1.key;
      const d2 = next1.data;
      const next2 = next1.next;
      if (Caml_obj.caml_equal(key, k2)) {
        return d2;
      }
      if (next2) {
        const k3 = next2.key;
        const d3 = next2.data;
        const next3 = next2.next;
        if (Caml_obj.caml_equal(key, k3)) {
          return d3;
        } else {
          let _param = next3;
          while(true) {
            const param = _param;
            if (param) {
              const k = param.key;
              const data = param.data;
              const next = param.next;
              if (Caml_obj.caml_equal(key, k)) {
                return data;
              }
              _param = next;
              continue ;
            }
            throw new Caml_js_exceptions.MelangeError(Stdlib.Not_found, {
                      MEL_EXN_ID: Stdlib.Not_found
                    });
          };
        }
      }
      throw new Caml_js_exceptions.MelangeError(Stdlib.Not_found, {
                MEL_EXN_ID: Stdlib.Not_found
              });
    }
    throw new Caml_js_exceptions.MelangeError(Stdlib.Not_found, {
              MEL_EXN_ID: Stdlib.Not_found
            });
  }
  throw new Caml_js_exceptions.MelangeError(Stdlib.Not_found, {
            MEL_EXN_ID: Stdlib.Not_found
          });
}

function find_opt(h, key) {
  const match = Caml_array.get(h.data, key_index(h, key));
  if (!match) {
    return ;
  }
  const k1 = match.key;
  const d1 = match.data;
  const next1 = match.next;
  if (Caml_obj.caml_equal(key, k1)) {
    return Caml_option.some(d1);
  }
  if (!next1) {
    return ;
  }
  const k2 = next1.key;
  const d2 = next1.data;
  const next2 = next1.next;
  if (Caml_obj.caml_equal(key, k2)) {
    return Caml_option.some(d2);
  }
  if (!next2) {
    return ;
  }
  const k3 = next2.key;
  const d3 = next2.data;
  const next3 = next2.next;
  if (Caml_obj.caml_equal(key, k3)) {
    return Caml_option.some(d3);
  } else {
    let _param = next3;
    while(true) {
      const param = _param;
      if (!param) {
        return ;
      }
      const k = param.key;
      const data = param.data;
      const next = param.next;
      if (Caml_obj.caml_equal(key, k)) {
        return Caml_option.some(data);
      }
      _param = next;
      continue ;
    };
  }
}

function find_all(h, key) {
  const find_in_bucket_dps = function (_dst, _offset, _param) {
    while(true) {
      const dst = _dst;
      const offset = _offset;
      const param = _param;
      if (!param) {
        dst[offset] = /* [] */0;
        return ;
      }
      const k = param.key;
      const data = param.data;
      const next = param.next;
      if (Caml_obj.caml_equal(k, key)) {
        const block = {
          hd: data,
          tl: 24029
        };
        dst[offset] = block;
        _param = next;
        _offset = "tl";
        _dst = block;
        continue ;
      }
      _param = next;
      continue ;
    };
  };
  let _param = Caml_array.get(h.data, key_index(h, key));
  while(true) {
    const param = _param;
    if (!param) {
      return /* [] */0;
    }
    const k = param.key;
    const data = param.data;
    const next = param.next;
    if (Caml_obj.caml_equal(k, key)) {
      const block = {
        hd: data,
        tl: 24029
      };
      find_in_bucket_dps(block, "tl", next);
      return block;
    }
    _param = next;
    continue ;
  };
}

function replace_bucket(key, data, _slot) {
  while(true) {
    const slot = _slot;
    if (!slot) {
      return true;
    }
    const k = slot.key;
    const next = slot.next;
    if (Caml_obj.caml_equal(k, key)) {
      slot.key = key;
      slot.data = data;
      return false;
    }
    _slot = next;
    continue ;
  };
}

function replace(h, key, data) {
  const i = key_index(h, key);
  const l = Caml_array.get(h.data, i);
  if (replace_bucket(key, data, l)) {
    Caml_array.set(h.data, i, /* Cons */{
          key: key,
          data: data,
          next: l
        });
    h.size = h.size + 1 | 0;
    if (h.size > (h.data.length << 1)) {
      return resize(key_index, h);
    } else {
      return ;
    }
  }
  
}

function mem(h, key) {
  let _param = Caml_array.get(h.data, key_index(h, key));
  while(true) {
    const param = _param;
    if (!param) {
      return false;
    }
    const k = param.key;
    const next = param.next;
    if (Caml_obj.caml_equal(k, key)) {
      return true;
    }
    _param = next;
    continue ;
  };
}

function add_seq(tbl, i) {
  Stdlib__Seq.iter((function (param) {
          add(tbl, param[0], param[1]);
        }), i);
}

function replace_seq(tbl, i) {
  Stdlib__Seq.iter((function (param) {
          replace(tbl, param[0], param[1]);
        }), i);
}

function of_seq(i) {
  const tbl = create(undefined, 16);
  replace_seq(tbl, i);
  return tbl;
}

function rebuild(randomOpt, h) {
  const random = randomOpt !== undefined ? randomOpt : Stdlib__Atomic.get(randomized);
  const s = power_2_above(16, h.data.length);
  const seed = random ? Stdlib__Random.State.bits(Stdlib__Domain.DLS.get(prng_key)) : h.seed;
  const h$p = {
    size: h.size,
    data: Caml_array.make(s, /* Empty */0),
    seed: seed,
    initial_size: h.initial_size
  };
  insert_all_buckets((function (param) {
          return key_index(h$p, param);
        }), false, h.data, h$p.data);
  return h$p;
}

const seeded_hash_param = Caml_hash.caml_hash;

export {
  create ,
  clear ,
  reset ,
  copy ,
  add ,
  find ,
  find_opt ,
  find_all ,
  mem ,
  remove ,
  replace ,
  iter ,
  filter_map_inplace ,
  fold ,
  length ,
  randomize ,
  is_randomized ,
  rebuild ,
  stats ,
  to_seq ,
  to_seq_keys ,
  to_seq_values ,
  add_seq ,
  replace_seq ,
  of_seq ,
  Make ,
  MakeSeeded ,
  hash ,
  seeded_hash ,
  hash_param ,
  seeded_hash_param ,
}
/* randomized Not a pure module */
