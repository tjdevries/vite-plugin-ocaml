// Generated by Melange

import * as Caml_js_exceptions from "melange.js/caml_js_exceptions.js";
import * as Caml_obj from "melange.js/caml_obj.js";
import * as Caml_option from "melange.js/caml_option.js";
import * as Curry from "melange.js/curry.js";
import * as Stdlib from "./stdlib.js";

function length(l) {
  let _len = 0;
  let _param = l;
  while(true) {
    const param = _param;
    const len = _len;
    if (!param) {
      return len;
    }
    _param = param.tl;
    _len = len + 1 | 0;
    continue ;
  };
}

function cons(a, l) {
  return {
          hd: a,
          tl: l
        };
}

function hd(param) {
  if (param) {
    return param.hd;
  }
  throw new Caml_js_exceptions.MelangeError("Failure", {
            MEL_EXN_ID: "Failure",
            _1: "hd"
          });
}

function tl(param) {
  if (param) {
    return param.tl;
  }
  throw new Caml_js_exceptions.MelangeError("Failure", {
            MEL_EXN_ID: "Failure",
            _1: "tl"
          });
}

function nth(l, n) {
  if (n < 0) {
    throw new Caml_js_exceptions.MelangeError("Invalid_argument", {
              MEL_EXN_ID: "Invalid_argument",
              _1: "List.nth"
            });
  }
  let _l = l;
  let _n = n;
  while(true) {
    const n$1 = _n;
    const l$1 = _l;
    if (l$1) {
      if (n$1 === 0) {
        return l$1.hd;
      }
      _n = n$1 - 1 | 0;
      _l = l$1.tl;
      continue ;
    }
    throw new Caml_js_exceptions.MelangeError("Failure", {
              MEL_EXN_ID: "Failure",
              _1: "nth"
            });
  };
}

function nth_opt(l, n) {
  if (n < 0) {
    throw new Caml_js_exceptions.MelangeError("Invalid_argument", {
              MEL_EXN_ID: "Invalid_argument",
              _1: "List.nth"
            });
  }
  let _l = l;
  let _n = n;
  while(true) {
    const n$1 = _n;
    const l$1 = _l;
    if (!l$1) {
      return ;
    }
    if (n$1 === 0) {
      return Caml_option.some(l$1.hd);
    }
    _n = n$1 - 1 | 0;
    _l = l$1.tl;
    continue ;
  };
}

function rev_append(_l1, _l2) {
  while(true) {
    const l2 = _l2;
    const l1 = _l1;
    if (!l1) {
      return l2;
    }
    _l2 = {
      hd: l1.hd,
      tl: l2
    };
    _l1 = l1.tl;
    continue ;
  };
}

function rev(l) {
  return rev_append(l, /* [] */0);
}

function init_dps(_dst, _offset, _i, last, f) {
  while(true) {
    const dst = _dst;
    const offset = _offset;
    const i = _i;
    if (i > last) {
      dst[offset] = /* [] */0;
      return ;
    }
    if (i === last) {
      dst[offset] = {
        hd: Curry._1(f, i),
        tl: /* [] */0
      };
      return ;
    }
    const r1 = Curry._1(f, i);
    const r2 = Curry._1(f, i + 1 | 0);
    const block = {
      hd: r2,
      tl: 24029
    };
    dst[offset] = {
      hd: r1,
      tl: block
    };
    _i = i + 2 | 0;
    _offset = "tl";
    _dst = block;
    continue ;
  };
}

function init(len, f) {
  if (len < 0) {
    throw new Caml_js_exceptions.MelangeError("Invalid_argument", {
              MEL_EXN_ID: "Invalid_argument",
              _1: "List.init"
            });
  }
  let i = 0;
  let last = len - 1 | 0;
  if (i > last) {
    return /* [] */0;
  }
  if (i === last) {
    return {
            hd: Curry._1(f, i),
            tl: /* [] */0
          };
  }
  const r1 = Curry._1(f, i);
  const r2 = Curry._1(f, i + 1 | 0);
  const block = {
    hd: r2,
    tl: 24029
  };
  return {
          hd: r1,
          tl: (init_dps(block, "tl", i + 2 | 0, last, f), block)
        };
}

function flatten(param) {
  if (param) {
    return Stdlib.$at(param.hd, flatten(param.tl));
  } else {
    return /* [] */0;
  }
}

function map_dps(_dst, _offset, f, _param) {
  while(true) {
    const dst = _dst;
    const offset = _offset;
    const param = _param;
    if (!param) {
      dst[offset] = /* [] */0;
      return ;
    }
    const match = param.tl;
    const a1 = param.hd;
    if (match) {
      const r1 = Curry._1(f, a1);
      const r2 = Curry._1(f, match.hd);
      const block = {
        hd: r2,
        tl: 24029
      };
      dst[offset] = {
        hd: r1,
        tl: block
      };
      _param = match.tl;
      _offset = "tl";
      _dst = block;
      continue ;
    }
    const r1$1 = Curry._1(f, a1);
    dst[offset] = {
      hd: r1$1,
      tl: /* [] */0
    };
    return ;
  };
}

function map(f, param) {
  if (!param) {
    return /* [] */0;
  }
  const match = param.tl;
  const a1 = param.hd;
  if (match) {
    const r1 = Curry._1(f, a1);
    const r2 = Curry._1(f, match.hd);
    const block = {
      hd: r2,
      tl: 24029
    };
    return {
            hd: r1,
            tl: (map_dps(block, "tl", f, match.tl), block)
          };
  }
  const r1$1 = Curry._1(f, a1);
  return {
          hd: r1$1,
          tl: /* [] */0
        };
}

function mapi_dps(_dst, _offset, _i, f, _param) {
  while(true) {
    const dst = _dst;
    const offset = _offset;
    const i = _i;
    const param = _param;
    if (!param) {
      dst[offset] = /* [] */0;
      return ;
    }
    const match = param.tl;
    const a1 = param.hd;
    if (match) {
      const r1 = Curry._2(f, i, a1);
      const r2 = Curry._2(f, i + 1 | 0, match.hd);
      const block = {
        hd: r2,
        tl: 24029
      };
      dst[offset] = {
        hd: r1,
        tl: block
      };
      _param = match.tl;
      _i = i + 2 | 0;
      _offset = "tl";
      _dst = block;
      continue ;
    }
    const r1$1 = Curry._2(f, i, a1);
    dst[offset] = {
      hd: r1$1,
      tl: /* [] */0
    };
    return ;
  };
}

function mapi(f, l) {
  let i = 0;
  if (!l) {
    return /* [] */0;
  }
  const match = l.tl;
  const a1 = l.hd;
  if (match) {
    const r1 = Curry._2(f, i, a1);
    const r2 = Curry._2(f, i + 1 | 0, match.hd);
    const block = {
      hd: r2,
      tl: 24029
    };
    return {
            hd: r1,
            tl: (mapi_dps(block, "tl", i + 2 | 0, f, match.tl), block)
          };
  }
  const r1$1 = Curry._2(f, i, a1);
  return {
          hd: r1$1,
          tl: /* [] */0
        };
}

function rev_map(f, l) {
  let _accu = /* [] */0;
  let _param = l;
  while(true) {
    const param = _param;
    const accu = _accu;
    if (!param) {
      return accu;
    }
    _param = param.tl;
    _accu = {
      hd: Curry._1(f, param.hd),
      tl: accu
    };
    continue ;
  };
}

function iter(f, _param) {
  while(true) {
    const param = _param;
    if (!param) {
      return ;
    }
    Curry._1(f, param.hd);
    _param = param.tl;
    continue ;
  };
}

function iteri(f, l) {
  let _i = 0;
  let _param = l;
  while(true) {
    const param = _param;
    const i = _i;
    if (!param) {
      return ;
    }
    Curry._2(f, i, param.hd);
    _param = param.tl;
    _i = i + 1 | 0;
    continue ;
  };
}

function fold_left(f, _accu, _l) {
  while(true) {
    const l = _l;
    const accu = _accu;
    if (!l) {
      return accu;
    }
    _l = l.tl;
    _accu = Curry._2(f, accu, l.hd);
    continue ;
  };
}

function fold_right(f, l, accu) {
  if (l) {
    return Curry._2(f, l.hd, fold_right(f, l.tl, accu));
  } else {
    return accu;
  }
}

function map2_dps(_dst, _offset, f, _l1, _l2) {
  while(true) {
    const dst = _dst;
    const offset = _offset;
    const l1 = _l1;
    const l2 = _l2;
    if (l1) {
      const match = l1.tl;
      const a1 = l1.hd;
      if (match) {
        if (l2) {
          const match$1 = l2.tl;
          if (match$1) {
            const r1 = Curry._2(f, a1, l2.hd);
            const r2 = Curry._2(f, match.hd, match$1.hd);
            const block = {
              hd: r2,
              tl: 24029
            };
            dst[offset] = {
              hd: r1,
              tl: block
            };
            _l2 = match$1.tl;
            _l1 = match.tl;
            _offset = "tl";
            _dst = block;
            continue ;
          }
          throw new Caml_js_exceptions.MelangeError("Invalid_argument", {
                    MEL_EXN_ID: "Invalid_argument",
                    _1: "List.map2"
                  });
        }
        throw new Caml_js_exceptions.MelangeError("Invalid_argument", {
                  MEL_EXN_ID: "Invalid_argument",
                  _1: "List.map2"
                });
      }
      if (l2) {
        if (l2.tl) {
          throw new Caml_js_exceptions.MelangeError("Invalid_argument", {
                    MEL_EXN_ID: "Invalid_argument",
                    _1: "List.map2"
                  });
        }
        const r1$1 = Curry._2(f, a1, l2.hd);
        dst[offset] = {
          hd: r1$1,
          tl: /* [] */0
        };
        return ;
      }
      throw new Caml_js_exceptions.MelangeError("Invalid_argument", {
                MEL_EXN_ID: "Invalid_argument",
                _1: "List.map2"
              });
    }
    if (l2) {
      throw new Caml_js_exceptions.MelangeError("Invalid_argument", {
                MEL_EXN_ID: "Invalid_argument",
                _1: "List.map2"
              });
    }
    dst[offset] = /* [] */0;
    return ;
  };
}

function map2(f, l1, l2) {
  if (l1) {
    const match = l1.tl;
    const a1 = l1.hd;
    if (match) {
      if (l2) {
        const match$1 = l2.tl;
        if (match$1) {
          const r1 = Curry._2(f, a1, l2.hd);
          const r2 = Curry._2(f, match.hd, match$1.hd);
          const block = {
            hd: r2,
            tl: 24029
          };
          return {
                  hd: r1,
                  tl: (map2_dps(block, "tl", f, match.tl, match$1.tl), block)
                };
        }
        throw new Caml_js_exceptions.MelangeError("Invalid_argument", {
                  MEL_EXN_ID: "Invalid_argument",
                  _1: "List.map2"
                });
      }
      throw new Caml_js_exceptions.MelangeError("Invalid_argument", {
                MEL_EXN_ID: "Invalid_argument",
                _1: "List.map2"
              });
    }
    if (l2) {
      if (l2.tl) {
        throw new Caml_js_exceptions.MelangeError("Invalid_argument", {
                  MEL_EXN_ID: "Invalid_argument",
                  _1: "List.map2"
                });
      }
      const r1$1 = Curry._2(f, a1, l2.hd);
      return {
              hd: r1$1,
              tl: /* [] */0
            };
    }
    throw new Caml_js_exceptions.MelangeError("Invalid_argument", {
              MEL_EXN_ID: "Invalid_argument",
              _1: "List.map2"
            });
  }
  if (!l2) {
    return /* [] */0;
  }
  throw new Caml_js_exceptions.MelangeError("Invalid_argument", {
            MEL_EXN_ID: "Invalid_argument",
            _1: "List.map2"
          });
}

function rev_map2(f, l1, l2) {
  let _accu = /* [] */0;
  let _l1 = l1;
  let _l2 = l2;
  while(true) {
    const l2$1 = _l2;
    const l1$1 = _l1;
    const accu = _accu;
    if (l1$1) {
      if (l2$1) {
        _l2 = l2$1.tl;
        _l1 = l1$1.tl;
        _accu = {
          hd: Curry._2(f, l1$1.hd, l2$1.hd),
          tl: accu
        };
        continue ;
      }
      throw new Caml_js_exceptions.MelangeError("Invalid_argument", {
                MEL_EXN_ID: "Invalid_argument",
                _1: "List.rev_map2"
              });
    }
    if (l2$1) {
      throw new Caml_js_exceptions.MelangeError("Invalid_argument", {
                MEL_EXN_ID: "Invalid_argument",
                _1: "List.rev_map2"
              });
    }
    return accu;
  };
}

function iter2(f, _l1, _l2) {
  while(true) {
    const l2 = _l2;
    const l1 = _l1;
    if (l1) {
      if (l2) {
        Curry._2(f, l1.hd, l2.hd);
        _l2 = l2.tl;
        _l1 = l1.tl;
        continue ;
      }
      throw new Caml_js_exceptions.MelangeError("Invalid_argument", {
                MEL_EXN_ID: "Invalid_argument",
                _1: "List.iter2"
              });
    }
    if (!l2) {
      return ;
    }
    throw new Caml_js_exceptions.MelangeError("Invalid_argument", {
              MEL_EXN_ID: "Invalid_argument",
              _1: "List.iter2"
            });
  };
}

function fold_left2(f, _accu, _l1, _l2) {
  while(true) {
    const l2 = _l2;
    const l1 = _l1;
    const accu = _accu;
    if (l1) {
      if (l2) {
        _l2 = l2.tl;
        _l1 = l1.tl;
        _accu = Curry._3(f, accu, l1.hd, l2.hd);
        continue ;
      }
      throw new Caml_js_exceptions.MelangeError("Invalid_argument", {
                MEL_EXN_ID: "Invalid_argument",
                _1: "List.fold_left2"
              });
    }
    if (l2) {
      throw new Caml_js_exceptions.MelangeError("Invalid_argument", {
                MEL_EXN_ID: "Invalid_argument",
                _1: "List.fold_left2"
              });
    }
    return accu;
  };
}

function fold_right2(f, l1, l2, accu) {
  if (l1) {
    if (l2) {
      return Curry._3(f, l1.hd, l2.hd, fold_right2(f, l1.tl, l2.tl, accu));
    }
    throw new Caml_js_exceptions.MelangeError("Invalid_argument", {
              MEL_EXN_ID: "Invalid_argument",
              _1: "List.fold_right2"
            });
  }
  if (l2) {
    throw new Caml_js_exceptions.MelangeError("Invalid_argument", {
              MEL_EXN_ID: "Invalid_argument",
              _1: "List.fold_right2"
            });
  }
  return accu;
}

function for_all(p, _param) {
  while(true) {
    const param = _param;
    if (!param) {
      return true;
    }
    if (!Curry._1(p, param.hd)) {
      return false;
    }
    _param = param.tl;
    continue ;
  };
}

function exists(p, _param) {
  while(true) {
    const param = _param;
    if (!param) {
      return false;
    }
    if (Curry._1(p, param.hd)) {
      return true;
    }
    _param = param.tl;
    continue ;
  };
}

function for_all2(p, _l1, _l2) {
  while(true) {
    const l2 = _l2;
    const l1 = _l1;
    if (l1) {
      if (l2) {
        if (!Curry._2(p, l1.hd, l2.hd)) {
          return false;
        }
        _l2 = l2.tl;
        _l1 = l1.tl;
        continue ;
      }
      throw new Caml_js_exceptions.MelangeError("Invalid_argument", {
                MEL_EXN_ID: "Invalid_argument",
                _1: "List.for_all2"
              });
    }
    if (!l2) {
      return true;
    }
    throw new Caml_js_exceptions.MelangeError("Invalid_argument", {
              MEL_EXN_ID: "Invalid_argument",
              _1: "List.for_all2"
            });
  };
}

function exists2(p, _l1, _l2) {
  while(true) {
    const l2 = _l2;
    const l1 = _l1;
    if (l1) {
      if (l2) {
        if (Curry._2(p, l1.hd, l2.hd)) {
          return true;
        }
        _l2 = l2.tl;
        _l1 = l1.tl;
        continue ;
      }
      throw new Caml_js_exceptions.MelangeError("Invalid_argument", {
                MEL_EXN_ID: "Invalid_argument",
                _1: "List.exists2"
              });
    }
    if (!l2) {
      return false;
    }
    throw new Caml_js_exceptions.MelangeError("Invalid_argument", {
              MEL_EXN_ID: "Invalid_argument",
              _1: "List.exists2"
            });
  };
}

function mem(x, _param) {
  while(true) {
    const param = _param;
    if (!param) {
      return false;
    }
    if (Caml_obj.caml_equal(param.hd, x)) {
      return true;
    }
    _param = param.tl;
    continue ;
  };
}

function memq(x, _param) {
  while(true) {
    const param = _param;
    if (!param) {
      return false;
    }
    if (param.hd === x) {
      return true;
    }
    _param = param.tl;
    continue ;
  };
}

function assoc(x, _param) {
  while(true) {
    const param = _param;
    if (param) {
      const match = param.hd;
      if (Caml_obj.caml_equal(match[0], x)) {
        return match[1];
      }
      _param = param.tl;
      continue ;
    }
    throw new Caml_js_exceptions.MelangeError(Stdlib.Not_found, {
              MEL_EXN_ID: Stdlib.Not_found
            });
  };
}

function assoc_opt(x, _param) {
  while(true) {
    const param = _param;
    if (!param) {
      return ;
    }
    const match = param.hd;
    if (Caml_obj.caml_equal(match[0], x)) {
      return Caml_option.some(match[1]);
    }
    _param = param.tl;
    continue ;
  };
}

function assq(x, _param) {
  while(true) {
    const param = _param;
    if (param) {
      const match = param.hd;
      if (match[0] === x) {
        return match[1];
      }
      _param = param.tl;
      continue ;
    }
    throw new Caml_js_exceptions.MelangeError(Stdlib.Not_found, {
              MEL_EXN_ID: Stdlib.Not_found
            });
  };
}

function assq_opt(x, _param) {
  while(true) {
    const param = _param;
    if (!param) {
      return ;
    }
    const match = param.hd;
    if (match[0] === x) {
      return Caml_option.some(match[1]);
    }
    _param = param.tl;
    continue ;
  };
}

function mem_assoc(x, _param) {
  while(true) {
    const param = _param;
    if (!param) {
      return false;
    }
    if (Caml_obj.caml_equal(param.hd[0], x)) {
      return true;
    }
    _param = param.tl;
    continue ;
  };
}

function mem_assq(x, _param) {
  while(true) {
    const param = _param;
    if (!param) {
      return false;
    }
    if (param.hd[0] === x) {
      return true;
    }
    _param = param.tl;
    continue ;
  };
}

function remove_assoc(x, param) {
  if (!param) {
    return /* [] */0;
  }
  const l = param.tl;
  const pair = param.hd;
  if (Caml_obj.caml_equal(pair[0], x)) {
    return l;
  } else {
    return {
            hd: pair,
            tl: remove_assoc(x, l)
          };
  }
}

function remove_assq(x, param) {
  if (!param) {
    return /* [] */0;
  }
  const l = param.tl;
  const pair = param.hd;
  if (pair[0] === x) {
    return l;
  } else {
    return {
            hd: pair,
            tl: remove_assq(x, l)
          };
  }
}

function find(p, _param) {
  while(true) {
    const param = _param;
    if (param) {
      const x = param.hd;
      if (Curry._1(p, x)) {
        return x;
      }
      _param = param.tl;
      continue ;
    }
    throw new Caml_js_exceptions.MelangeError(Stdlib.Not_found, {
              MEL_EXN_ID: Stdlib.Not_found
            });
  };
}

function find_opt(p, _param) {
  while(true) {
    const param = _param;
    if (!param) {
      return ;
    }
    const x = param.hd;
    if (Curry._1(p, x)) {
      return Caml_option.some(x);
    }
    _param = param.tl;
    continue ;
  };
}

function find_index(p) {
  return function (param) {
    let _i = 0;
    let _param = param;
    while(true) {
      const param$1 = _param;
      const i = _i;
      if (!param$1) {
        return ;
      }
      if (Curry._1(p, param$1.hd)) {
        return i;
      }
      _param = param$1.tl;
      _i = i + 1 | 0;
      continue ;
    };
  };
}

function find_map(f, _param) {
  while(true) {
    const param = _param;
    if (!param) {
      return ;
    }
    const result = Curry._1(f, param.hd);
    if (result !== undefined) {
      return result;
    }
    _param = param.tl;
    continue ;
  };
}

function find_mapi(f) {
  return function (param) {
    let _i = 0;
    let _param = param;
    while(true) {
      const param$1 = _param;
      const i = _i;
      if (!param$1) {
        return ;
      }
      const result = Curry._2(f, i, param$1.hd);
      if (result !== undefined) {
        return result;
      }
      _param = param$1.tl;
      _i = i + 1 | 0;
      continue ;
    };
  };
}

function find_all(p, _param) {
  while(true) {
    const param = _param;
    if (!param) {
      return /* [] */0;
    }
    const l = param.tl;
    const x = param.hd;
    if (Curry._1(p, x)) {
      const block = {
        hd: x,
        tl: 24029
      };
      find_all_dps(block, "tl", p, l);
      return block;
    }
    _param = l;
    continue ;
  };
}

function find_all_dps(_dst, _offset, p, _param) {
  while(true) {
    const dst = _dst;
    const offset = _offset;
    const param = _param;
    if (!param) {
      dst[offset] = /* [] */0;
      return ;
    }
    const l = param.tl;
    const x = param.hd;
    if (Curry._1(p, x)) {
      const block = {
        hd: x,
        tl: 24029
      };
      dst[offset] = block;
      _param = l;
      _offset = "tl";
      _dst = block;
      continue ;
    }
    _param = l;
    continue ;
  };
}

function filteri_dps(_dst, _offset, p, _i, _param) {
  while(true) {
    const dst = _dst;
    const offset = _offset;
    const i = _i;
    const param = _param;
    if (!param) {
      dst[offset] = /* [] */0;
      return ;
    }
    const l = param.tl;
    const x = param.hd;
    const i$p = i + 1 | 0;
    if (Curry._2(p, i, x)) {
      const block = {
        hd: x,
        tl: 24029
      };
      dst[offset] = block;
      _param = l;
      _i = i$p;
      _offset = "tl";
      _dst = block;
      continue ;
    }
    _param = l;
    _i = i$p;
    continue ;
  };
}

function filteri(p, l) {
  let _i = 0;
  let _param = l;
  while(true) {
    const param = _param;
    const i = _i;
    if (!param) {
      return /* [] */0;
    }
    const l$1 = param.tl;
    const x = param.hd;
    const i$p = i + 1 | 0;
    if (Curry._2(p, i, x)) {
      const block = {
        hd: x,
        tl: 24029
      };
      filteri_dps(block, "tl", p, i$p, l$1);
      return block;
    }
    _param = l$1;
    _i = i$p;
    continue ;
  };
}

function filter_map(f, _param) {
  while(true) {
    const param = _param;
    if (!param) {
      return /* [] */0;
    }
    const l = param.tl;
    const v = Curry._1(f, param.hd);
    if (v !== undefined) {
      const block = {
        hd: Caml_option.valFromOption(v),
        tl: 24029
      };
      filter_map_dps(block, "tl", f, l);
      return block;
    }
    _param = l;
    continue ;
  };
}

function filter_map_dps(_dst, _offset, f, _param) {
  while(true) {
    const dst = _dst;
    const offset = _offset;
    const param = _param;
    if (!param) {
      dst[offset] = /* [] */0;
      return ;
    }
    const l = param.tl;
    const v = Curry._1(f, param.hd);
    if (v !== undefined) {
      const block = {
        hd: Caml_option.valFromOption(v),
        tl: 24029
      };
      dst[offset] = block;
      _param = l;
      _offset = "tl";
      _dst = block;
      continue ;
    }
    _param = l;
    continue ;
  };
}

function concat_map(f, param) {
  if (param) {
    let ys = Curry._1(f, param.hd);
    let xs = param.tl;
    if (!ys) {
      return concat_map(f, xs);
    }
    const block = {
      hd: ys.hd,
      tl: 24029
    };
    prepend_concat_map_dps(block, "tl", ys.tl, f, xs);
    return block;
  } else {
    return /* [] */0;
  }
}

function prepend_concat_map_dps(_dst, _offset, _ys, f, xs) {
  while(true) {
    const dst = _dst;
    const offset = _offset;
    const ys = _ys;
    if (!ys) {
      if (xs) {
        return prepend_concat_map_dps(dst, offset, Curry._1(f, xs.hd), f, xs.tl);
      } else {
        dst[offset] = /* [] */0;
        return ;
      }
    }
    const block = {
      hd: ys.hd,
      tl: 24029
    };
    dst[offset] = block;
    _ys = ys.tl;
    _offset = "tl";
    _dst = block;
    continue ;
  };
}

function fold_left_map(f, accu, l) {
  let _accu = accu;
  let _l_accu = /* [] */0;
  let _param = l;
  while(true) {
    const param = _param;
    const l_accu = _l_accu;
    const accu$1 = _accu;
    if (!param) {
      return [
              accu$1,
              rev_append(l_accu, /* [] */0)
            ];
    }
    const match = Curry._2(f, accu$1, param.hd);
    _param = param.tl;
    _l_accu = {
      hd: match[1],
      tl: l_accu
    };
    _accu = match[0];
    continue ;
  };
}

function partition(p, l) {
  let _yes = /* [] */0;
  let _no = /* [] */0;
  let _param = l;
  while(true) {
    const param = _param;
    const no = _no;
    const yes = _yes;
    if (!param) {
      return [
              rev_append(yes, /* [] */0),
              rev_append(no, /* [] */0)
            ];
    }
    const l$1 = param.tl;
    const x = param.hd;
    if (Curry._1(p, x)) {
      _param = l$1;
      _yes = {
        hd: x,
        tl: yes
      };
      continue ;
    }
    _param = l$1;
    _no = {
      hd: x,
      tl: no
    };
    continue ;
  };
}

function partition_map(p, l) {
  let _left = /* [] */0;
  let _right = /* [] */0;
  let _param = l;
  while(true) {
    const param = _param;
    const right = _right;
    const left = _left;
    if (!param) {
      return [
              rev_append(left, /* [] */0),
              rev_append(right, /* [] */0)
            ];
    }
    const l$1 = param.tl;
    const v = Curry._1(p, param.hd);
    if (v.TAG === /* Left */0) {
      _param = l$1;
      _left = {
        hd: v._0,
        tl: left
      };
      continue ;
    }
    _param = l$1;
    _right = {
      hd: v._0,
      tl: right
    };
    continue ;
  };
}

function split(param) {
  if (!param) {
    return [
            /* [] */0,
            /* [] */0
          ];
  }
  const match = param.hd;
  const match$1 = split(param.tl);
  return [
          {
            hd: match[0],
            tl: match$1[0]
          },
          {
            hd: match[1],
            tl: match$1[1]
          }
        ];
}

function combine(l1, l2) {
  if (l1) {
    if (l2) {
      return {
              hd: [
                l1.hd,
                l2.hd
              ],
              tl: combine(l1.tl, l2.tl)
            };
    }
    throw new Caml_js_exceptions.MelangeError("Invalid_argument", {
              MEL_EXN_ID: "Invalid_argument",
              _1: "List.combine"
            });
  }
  if (!l2) {
    return /* [] */0;
  }
  throw new Caml_js_exceptions.MelangeError("Invalid_argument", {
            MEL_EXN_ID: "Invalid_argument",
            _1: "List.combine"
          });
}

function merge(cmp, l1, l2) {
  if (!l1) {
    return l2;
  }
  if (!l2) {
    return l1;
  }
  const h2 = l2.hd;
  const h1 = l1.hd;
  if (Curry._2(cmp, h1, h2) <= 0) {
    return {
            hd: h1,
            tl: merge(cmp, l1.tl, l2)
          };
  } else {
    return {
            hd: h2,
            tl: merge(cmp, l1, l2.tl)
          };
  }
}

function stable_sort(cmp, l) {
  const rev_merge = function (_l1, _l2, _accu) {
    while(true) {
      const accu = _accu;
      const l2 = _l2;
      const l1 = _l1;
      if (!l1) {
        return rev_append(l2, accu);
      }
      if (!l2) {
        return rev_append(l1, accu);
      }
      const h2 = l2.hd;
      const h1 = l1.hd;
      if (Curry._2(cmp, h1, h2) <= 0) {
        _accu = {
          hd: h1,
          tl: accu
        };
        _l1 = l1.tl;
        continue ;
      }
      _accu = {
        hd: h2,
        tl: accu
      };
      _l2 = l2.tl;
      continue ;
    };
  };
  const rev_merge_rev = function (_l1, _l2, _accu) {
    while(true) {
      const accu = _accu;
      const l2 = _l2;
      const l1 = _l1;
      if (!l1) {
        return rev_append(l2, accu);
      }
      if (!l2) {
        return rev_append(l1, accu);
      }
      const h2 = l2.hd;
      const h1 = l1.hd;
      if (Curry._2(cmp, h1, h2) > 0) {
        _accu = {
          hd: h1,
          tl: accu
        };
        _l1 = l1.tl;
        continue ;
      }
      _accu = {
        hd: h2,
        tl: accu
      };
      _l2 = l2.tl;
      continue ;
    };
  };
  const sort = function (n, l) {
    if (n !== 2) {
      if (n === 3 && l) {
        const match = l.tl;
        if (match) {
          const match$1 = match.tl;
          if (match$1) {
            const x3 = match$1.hd;
            const x2 = match.hd;
            const x1 = l.hd;
            const s = Curry._2(cmp, x1, x2) <= 0 ? (
                Curry._2(cmp, x2, x3) <= 0 ? ({
                      hd: x1,
                      tl: {
                        hd: x2,
                        tl: {
                          hd: x3,
                          tl: /* [] */0
                        }
                      }
                    }) : (
                    Curry._2(cmp, x1, x3) <= 0 ? ({
                          hd: x1,
                          tl: {
                            hd: x3,
                            tl: {
                              hd: x2,
                              tl: /* [] */0
                            }
                          }
                        }) : ({
                          hd: x3,
                          tl: {
                            hd: x1,
                            tl: {
                              hd: x2,
                              tl: /* [] */0
                            }
                          }
                        })
                  )
              ) : (
                Curry._2(cmp, x1, x3) <= 0 ? ({
                      hd: x2,
                      tl: {
                        hd: x1,
                        tl: {
                          hd: x3,
                          tl: /* [] */0
                        }
                      }
                    }) : (
                    Curry._2(cmp, x2, x3) <= 0 ? ({
                          hd: x2,
                          tl: {
                            hd: x3,
                            tl: {
                              hd: x1,
                              tl: /* [] */0
                            }
                          }
                        }) : ({
                          hd: x3,
                          tl: {
                            hd: x2,
                            tl: {
                              hd: x1,
                              tl: /* [] */0
                            }
                          }
                        })
                  )
              );
            return [
                    s,
                    match$1.tl
                  ];
          }
          
        }
        
      }
      
    } else if (l) {
      const match$2 = l.tl;
      if (match$2) {
        const x2$1 = match$2.hd;
        const x1$1 = l.hd;
        const s$1 = Curry._2(cmp, x1$1, x2$1) <= 0 ? ({
              hd: x1$1,
              tl: {
                hd: x2$1,
                tl: /* [] */0
              }
            }) : ({
              hd: x2$1,
              tl: {
                hd: x1$1,
                tl: /* [] */0
              }
            });
        return [
                s$1,
                match$2.tl
              ];
      }
      
    }
    const n1 = (n >> 1);
    const n2 = n - n1 | 0;
    const match$3 = rev_sort(n1, l);
    const match$4 = rev_sort(n2, match$3[1]);
    return [
            rev_merge_rev(match$3[0], match$4[0], /* [] */0),
            match$4[1]
          ];
  };
  const rev_sort = function (n, l) {
    if (n !== 2) {
      if (n === 3 && l) {
        const match = l.tl;
        if (match) {
          const match$1 = match.tl;
          if (match$1) {
            const x3 = match$1.hd;
            const x2 = match.hd;
            const x1 = l.hd;
            const s = Curry._2(cmp, x1, x2) > 0 ? (
                Curry._2(cmp, x2, x3) > 0 ? ({
                      hd: x1,
                      tl: {
                        hd: x2,
                        tl: {
                          hd: x3,
                          tl: /* [] */0
                        }
                      }
                    }) : (
                    Curry._2(cmp, x1, x3) > 0 ? ({
                          hd: x1,
                          tl: {
                            hd: x3,
                            tl: {
                              hd: x2,
                              tl: /* [] */0
                            }
                          }
                        }) : ({
                          hd: x3,
                          tl: {
                            hd: x1,
                            tl: {
                              hd: x2,
                              tl: /* [] */0
                            }
                          }
                        })
                  )
              ) : (
                Curry._2(cmp, x1, x3) > 0 ? ({
                      hd: x2,
                      tl: {
                        hd: x1,
                        tl: {
                          hd: x3,
                          tl: /* [] */0
                        }
                      }
                    }) : (
                    Curry._2(cmp, x2, x3) > 0 ? ({
                          hd: x2,
                          tl: {
                            hd: x3,
                            tl: {
                              hd: x1,
                              tl: /* [] */0
                            }
                          }
                        }) : ({
                          hd: x3,
                          tl: {
                            hd: x2,
                            tl: {
                              hd: x1,
                              tl: /* [] */0
                            }
                          }
                        })
                  )
              );
            return [
                    s,
                    match$1.tl
                  ];
          }
          
        }
        
      }
      
    } else if (l) {
      const match$2 = l.tl;
      if (match$2) {
        const x2$1 = match$2.hd;
        const x1$1 = l.hd;
        const s$1 = Curry._2(cmp, x1$1, x2$1) > 0 ? ({
              hd: x1$1,
              tl: {
                hd: x2$1,
                tl: /* [] */0
              }
            }) : ({
              hd: x2$1,
              tl: {
                hd: x1$1,
                tl: /* [] */0
              }
            });
        return [
                s$1,
                match$2.tl
              ];
      }
      
    }
    const n1 = (n >> 1);
    const n2 = n - n1 | 0;
    const match$3 = sort(n1, l);
    const match$4 = sort(n2, match$3[1]);
    return [
            rev_merge(match$3[0], match$4[0], /* [] */0),
            match$4[1]
          ];
  };
  const len = length(l);
  if (len < 2) {
    return l;
  } else {
    return sort(len, l)[0];
  }
}

function sort_uniq(cmp, l) {
  const rev_merge = function (_l1, _l2, _accu) {
    while(true) {
      const accu = _accu;
      const l2 = _l2;
      const l1 = _l1;
      if (!l1) {
        return rev_append(l2, accu);
      }
      if (!l2) {
        return rev_append(l1, accu);
      }
      const t2 = l2.tl;
      const h2 = l2.hd;
      const t1 = l1.tl;
      const h1 = l1.hd;
      const c = Curry._2(cmp, h1, h2);
      if (c === 0) {
        _accu = {
          hd: h1,
          tl: accu
        };
        _l2 = t2;
        _l1 = t1;
        continue ;
      }
      if (c < 0) {
        _accu = {
          hd: h1,
          tl: accu
        };
        _l1 = t1;
        continue ;
      }
      _accu = {
        hd: h2,
        tl: accu
      };
      _l2 = t2;
      continue ;
    };
  };
  const rev_merge_rev = function (_l1, _l2, _accu) {
    while(true) {
      const accu = _accu;
      const l2 = _l2;
      const l1 = _l1;
      if (!l1) {
        return rev_append(l2, accu);
      }
      if (!l2) {
        return rev_append(l1, accu);
      }
      const t2 = l2.tl;
      const h2 = l2.hd;
      const t1 = l1.tl;
      const h1 = l1.hd;
      const c = Curry._2(cmp, h1, h2);
      if (c === 0) {
        _accu = {
          hd: h1,
          tl: accu
        };
        _l2 = t2;
        _l1 = t1;
        continue ;
      }
      if (c > 0) {
        _accu = {
          hd: h1,
          tl: accu
        };
        _l1 = t1;
        continue ;
      }
      _accu = {
        hd: h2,
        tl: accu
      };
      _l2 = t2;
      continue ;
    };
  };
  const sort = function (n, l) {
    if (n !== 2) {
      if (n === 3 && l) {
        const match = l.tl;
        if (match) {
          const match$1 = match.tl;
          if (match$1) {
            const x3 = match$1.hd;
            const x2 = match.hd;
            const x1 = l.hd;
            const c = Curry._2(cmp, x1, x2);
            let s;
            if (c === 0) {
              const c$1 = Curry._2(cmp, x2, x3);
              s = c$1 === 0 ? ({
                    hd: x2,
                    tl: /* [] */0
                  }) : (
                  c$1 < 0 ? ({
                        hd: x2,
                        tl: {
                          hd: x3,
                          tl: /* [] */0
                        }
                      }) : ({
                        hd: x3,
                        tl: {
                          hd: x2,
                          tl: /* [] */0
                        }
                      })
                );
            } else if (c < 0) {
              const c$2 = Curry._2(cmp, x2, x3);
              if (c$2 === 0) {
                s = {
                  hd: x1,
                  tl: {
                    hd: x2,
                    tl: /* [] */0
                  }
                };
              } else if (c$2 < 0) {
                s = {
                  hd: x1,
                  tl: {
                    hd: x2,
                    tl: {
                      hd: x3,
                      tl: /* [] */0
                    }
                  }
                };
              } else {
                const c$3 = Curry._2(cmp, x1, x3);
                s = c$3 === 0 ? ({
                      hd: x1,
                      tl: {
                        hd: x2,
                        tl: /* [] */0
                      }
                    }) : (
                    c$3 < 0 ? ({
                          hd: x1,
                          tl: {
                            hd: x3,
                            tl: {
                              hd: x2,
                              tl: /* [] */0
                            }
                          }
                        }) : ({
                          hd: x3,
                          tl: {
                            hd: x1,
                            tl: {
                              hd: x2,
                              tl: /* [] */0
                            }
                          }
                        })
                  );
              }
            } else {
              const c$4 = Curry._2(cmp, x1, x3);
              if (c$4 === 0) {
                s = {
                  hd: x2,
                  tl: {
                    hd: x1,
                    tl: /* [] */0
                  }
                };
              } else if (c$4 < 0) {
                s = {
                  hd: x2,
                  tl: {
                    hd: x1,
                    tl: {
                      hd: x3,
                      tl: /* [] */0
                    }
                  }
                };
              } else {
                const c$5 = Curry._2(cmp, x2, x3);
                s = c$5 === 0 ? ({
                      hd: x2,
                      tl: {
                        hd: x1,
                        tl: /* [] */0
                      }
                    }) : (
                    c$5 < 0 ? ({
                          hd: x2,
                          tl: {
                            hd: x3,
                            tl: {
                              hd: x1,
                              tl: /* [] */0
                            }
                          }
                        }) : ({
                          hd: x3,
                          tl: {
                            hd: x2,
                            tl: {
                              hd: x1,
                              tl: /* [] */0
                            }
                          }
                        })
                  );
              }
            }
            return [
                    s,
                    match$1.tl
                  ];
          }
          
        }
        
      }
      
    } else if (l) {
      const match$2 = l.tl;
      if (match$2) {
        const x2$1 = match$2.hd;
        const x1$1 = l.hd;
        const c$6 = Curry._2(cmp, x1$1, x2$1);
        const s$1 = c$6 === 0 ? ({
              hd: x1$1,
              tl: /* [] */0
            }) : (
            c$6 < 0 ? ({
                  hd: x1$1,
                  tl: {
                    hd: x2$1,
                    tl: /* [] */0
                  }
                }) : ({
                  hd: x2$1,
                  tl: {
                    hd: x1$1,
                    tl: /* [] */0
                  }
                })
          );
        return [
                s$1,
                match$2.tl
              ];
      }
      
    }
    const n1 = (n >> 1);
    const n2 = n - n1 | 0;
    const match$3 = rev_sort(n1, l);
    const match$4 = rev_sort(n2, match$3[1]);
    return [
            rev_merge_rev(match$3[0], match$4[0], /* [] */0),
            match$4[1]
          ];
  };
  const rev_sort = function (n, l) {
    if (n !== 2) {
      if (n === 3 && l) {
        const match = l.tl;
        if (match) {
          const match$1 = match.tl;
          if (match$1) {
            const x3 = match$1.hd;
            const x2 = match.hd;
            const x1 = l.hd;
            const c = Curry._2(cmp, x1, x2);
            let s;
            if (c === 0) {
              const c$1 = Curry._2(cmp, x2, x3);
              s = c$1 === 0 ? ({
                    hd: x2,
                    tl: /* [] */0
                  }) : (
                  c$1 > 0 ? ({
                        hd: x2,
                        tl: {
                          hd: x3,
                          tl: /* [] */0
                        }
                      }) : ({
                        hd: x3,
                        tl: {
                          hd: x2,
                          tl: /* [] */0
                        }
                      })
                );
            } else if (c > 0) {
              const c$2 = Curry._2(cmp, x2, x3);
              if (c$2 === 0) {
                s = {
                  hd: x1,
                  tl: {
                    hd: x2,
                    tl: /* [] */0
                  }
                };
              } else if (c$2 > 0) {
                s = {
                  hd: x1,
                  tl: {
                    hd: x2,
                    tl: {
                      hd: x3,
                      tl: /* [] */0
                    }
                  }
                };
              } else {
                const c$3 = Curry._2(cmp, x1, x3);
                s = c$3 === 0 ? ({
                      hd: x1,
                      tl: {
                        hd: x2,
                        tl: /* [] */0
                      }
                    }) : (
                    c$3 > 0 ? ({
                          hd: x1,
                          tl: {
                            hd: x3,
                            tl: {
                              hd: x2,
                              tl: /* [] */0
                            }
                          }
                        }) : ({
                          hd: x3,
                          tl: {
                            hd: x1,
                            tl: {
                              hd: x2,
                              tl: /* [] */0
                            }
                          }
                        })
                  );
              }
            } else {
              const c$4 = Curry._2(cmp, x1, x3);
              if (c$4 === 0) {
                s = {
                  hd: x2,
                  tl: {
                    hd: x1,
                    tl: /* [] */0
                  }
                };
              } else if (c$4 > 0) {
                s = {
                  hd: x2,
                  tl: {
                    hd: x1,
                    tl: {
                      hd: x3,
                      tl: /* [] */0
                    }
                  }
                };
              } else {
                const c$5 = Curry._2(cmp, x2, x3);
                s = c$5 === 0 ? ({
                      hd: x2,
                      tl: {
                        hd: x1,
                        tl: /* [] */0
                      }
                    }) : (
                    c$5 > 0 ? ({
                          hd: x2,
                          tl: {
                            hd: x3,
                            tl: {
                              hd: x1,
                              tl: /* [] */0
                            }
                          }
                        }) : ({
                          hd: x3,
                          tl: {
                            hd: x2,
                            tl: {
                              hd: x1,
                              tl: /* [] */0
                            }
                          }
                        })
                  );
              }
            }
            return [
                    s,
                    match$1.tl
                  ];
          }
          
        }
        
      }
      
    } else if (l) {
      const match$2 = l.tl;
      if (match$2) {
        const x2$1 = match$2.hd;
        const x1$1 = l.hd;
        const c$6 = Curry._2(cmp, x1$1, x2$1);
        const s$1 = c$6 === 0 ? ({
              hd: x1$1,
              tl: /* [] */0
            }) : (
            c$6 > 0 ? ({
                  hd: x1$1,
                  tl: {
                    hd: x2$1,
                    tl: /* [] */0
                  }
                }) : ({
                  hd: x2$1,
                  tl: {
                    hd: x1$1,
                    tl: /* [] */0
                  }
                })
          );
        return [
                s$1,
                match$2.tl
              ];
      }
      
    }
    const n1 = (n >> 1);
    const n2 = n - n1 | 0;
    const match$3 = sort(n1, l);
    const match$4 = sort(n2, match$3[1]);
    return [
            rev_merge(match$3[0], match$4[0], /* [] */0),
            match$4[1]
          ];
  };
  const len = length(l);
  if (len < 2) {
    return l;
  } else {
    return sort(len, l)[0];
  }
}

function compare_lengths(_l1, _l2) {
  while(true) {
    const l2 = _l2;
    const l1 = _l1;
    if (!l1) {
      if (l2) {
        return -1;
      } else {
        return 0;
      }
    }
    if (!l2) {
      return 1;
    }
    _l2 = l2.tl;
    _l1 = l1.tl;
    continue ;
  };
}

function compare_length_with(_l, _n) {
  while(true) {
    const n = _n;
    const l = _l;
    if (!l) {
      if (n === 0) {
        return 0;
      } else if (n > 0) {
        return -1;
      } else {
        return 1;
      }
    }
    if (n <= 0) {
      return 1;
    }
    _n = n - 1 | 0;
    _l = l.tl;
    continue ;
  };
}

function is_empty(param) {
  if (param) {
    return false;
  } else {
    return true;
  }
}

function equal(eq, _l1, _l2) {
  while(true) {
    const l2 = _l2;
    const l1 = _l1;
    if (!l1) {
      if (l2) {
        return false;
      } else {
        return true;
      }
    }
    if (!l2) {
      return false;
    }
    if (!Curry._2(eq, l1.hd, l2.hd)) {
      return false;
    }
    _l2 = l2.tl;
    _l1 = l1.tl;
    continue ;
  };
}

function compare(cmp, _l1, _l2) {
  while(true) {
    const l2 = _l2;
    const l1 = _l1;
    if (!l1) {
      if (l2) {
        return -1;
      } else {
        return 0;
      }
    }
    if (!l2) {
      return 1;
    }
    const c = Curry._2(cmp, l1.hd, l2.hd);
    if (c !== 0) {
      return c;
    }
    _l2 = l2.tl;
    _l1 = l1.tl;
    continue ;
  };
}

function to_seq(l) {
  const aux = function (l, param) {
    if (!l) {
      return /* Nil */0;
    }
    const tail = l.tl;
    return /* Cons */{
            _0: l.hd,
            _1: (function (param) {
                return aux(tail, param);
              })
          };
  };
  return function (param) {
    return aux(l, param);
  };
}

function of_seq_dps(_dst, _offset, _seq) {
  while(true) {
    const dst = _dst;
    const offset = _offset;
    const seq = _seq;
    const match = Curry._1(seq, undefined);
    if (!match) {
      dst[offset] = /* [] */0;
      return ;
    }
    const x1 = match._0;
    const match$1 = Curry._1(match._1, undefined);
    if (!match$1) {
      dst[offset] = {
        hd: x1,
        tl: /* [] */0
      };
      return ;
    }
    const block = {
      hd: match$1._0,
      tl: 24029
    };
    dst[offset] = {
      hd: x1,
      tl: block
    };
    _seq = match$1._1;
    _offset = "tl";
    _dst = block;
    continue ;
  };
}

function of_seq(seq) {
  const match = Curry._1(seq, undefined);
  if (!match) {
    return /* [] */0;
  }
  const x1 = match._0;
  const match$1 = Curry._1(match._1, undefined);
  if (!match$1) {
    return {
            hd: x1,
            tl: /* [] */0
          };
  }
  const block = {
    hd: match$1._0,
    tl: 24029
  };
  return {
          hd: x1,
          tl: (of_seq_dps(block, "tl", match$1._1), block)
        };
}

const append = Stdlib.$at;

const concat = flatten;

const filter = find_all;

const sort = stable_sort;

const fast_sort = stable_sort;

export {
  length ,
  compare_lengths ,
  compare_length_with ,
  is_empty ,
  cons ,
  hd ,
  tl ,
  nth ,
  nth_opt ,
  rev ,
  init ,
  append ,
  rev_append ,
  concat ,
  flatten ,
  equal ,
  compare ,
  iter ,
  iteri ,
  map ,
  mapi ,
  rev_map ,
  filter_map ,
  concat_map ,
  fold_left_map ,
  fold_left ,
  fold_right ,
  iter2 ,
  map2 ,
  rev_map2 ,
  fold_left2 ,
  fold_right2 ,
  for_all ,
  exists ,
  for_all2 ,
  exists2 ,
  mem ,
  memq ,
  find ,
  find_opt ,
  find_index ,
  find_map ,
  find_mapi ,
  filter ,
  find_all ,
  filteri ,
  partition ,
  partition_map ,
  assoc ,
  assoc_opt ,
  assq ,
  assq_opt ,
  mem_assoc ,
  mem_assq ,
  remove_assoc ,
  remove_assq ,
  split ,
  combine ,
  sort ,
  stable_sort ,
  fast_sort ,
  sort_uniq ,
  merge ,
  to_seq ,
  of_seq ,
}
/* No side effect */
