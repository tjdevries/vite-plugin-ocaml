// Generated by Melange

import * as Caml_js_exceptions from "melange.js/caml_js_exceptions.js";
import * as Caml_obj from "melange.js/caml_obj.js";
import * as Caml_option from "melange.js/caml_option.js";
import * as Curry from "melange.js/curry.js";
import * as Stdlib from "./stdlib.js";
import * as Stdlib__List from "./list.js";
import * as Stdlib__Seq from "./seq.js";

function Make(funarg) {
  const height = function (param) {
    if (param) {
      return param.h;
    } else {
      return 0;
    }
  };
  const create = function (l, v, r) {
    const hl = l ? l.h : 0;
    const hr = r ? r.h : 0;
    return /* Node */{
            l: l,
            v: v,
            r: r,
            h: hl >= hr ? hl + 1 | 0 : hr + 1 | 0
          };
  };
  const bal = function (l, v, r) {
    const hl = l ? l.h : 0;
    const hr = r ? r.h : 0;
    if (hl > (hr + 2 | 0)) {
      if (l) {
        const lr = l.r;
        const lv = l.v;
        const ll = l.l;
        if (height(ll) >= height(lr)) {
          return create(ll, lv, create(lr, v, r));
        }
        if (lr) {
          return create(create(ll, lv, lr.l), lr.v, create(lr.r, v, r));
        }
        throw new Caml_js_exceptions.MelangeError("Invalid_argument", {
                  MEL_EXN_ID: "Invalid_argument",
                  _1: "Set.bal"
                });
      }
      throw new Caml_js_exceptions.MelangeError("Invalid_argument", {
                MEL_EXN_ID: "Invalid_argument",
                _1: "Set.bal"
              });
    }
    if (hr <= (hl + 2 | 0)) {
      return /* Node */{
              l: l,
              v: v,
              r: r,
              h: hl >= hr ? hl + 1 | 0 : hr + 1 | 0
            };
    }
    if (r) {
      const rr = r.r;
      const rv = r.v;
      const rl = r.l;
      if (height(rr) >= height(rl)) {
        return create(create(l, v, rl), rv, rr);
      }
      if (rl) {
        return create(create(l, v, rl.l), rl.v, create(rl.r, rv, rr));
      }
      throw new Caml_js_exceptions.MelangeError("Invalid_argument", {
                MEL_EXN_ID: "Invalid_argument",
                _1: "Set.bal"
              });
    }
    throw new Caml_js_exceptions.MelangeError("Invalid_argument", {
              MEL_EXN_ID: "Invalid_argument",
              _1: "Set.bal"
            });
  };
  const add = function (x, t) {
    if (!t) {
      return /* Node */{
              l: /* Empty */0,
              v: x,
              r: /* Empty */0,
              h: 1
            };
    }
    const r = t.r;
    const v = t.v;
    const l = t.l;
    const c = Curry._2(funarg.compare, x, v);
    if (c === 0) {
      return t;
    }
    if (c < 0) {
      const ll = add(x, l);
      if (l === ll) {
        return t;
      } else {
        return bal(ll, v, r);
      }
    }
    const rr = add(x, r);
    if (r === rr) {
      return t;
    } else {
      return bal(l, v, rr);
    }
  };
  const singleton = function (x) {
    return /* Node */{
            l: /* Empty */0,
            v: x,
            r: /* Empty */0,
            h: 1
          };
  };
  const add_min_element = function (x, param) {
    if (param) {
      return bal(add_min_element(x, param.l), param.v, param.r);
    } else {
      return singleton(x);
    }
  };
  const add_max_element = function (x, param) {
    if (param) {
      return bal(param.l, param.v, add_max_element(x, param.r));
    } else {
      return singleton(x);
    }
  };
  const join = function (l, v, r) {
    if (!l) {
      return add_min_element(v, r);
    }
    if (!r) {
      return add_max_element(v, l);
    }
    const rh = r.h;
    const lh = l.h;
    if (lh > (rh + 2 | 0)) {
      return bal(l.l, l.v, join(l.r, v, r));
    } else if (rh > (lh + 2 | 0)) {
      return bal(join(l, v, r.l), r.v, r.r);
    } else {
      return create(l, v, r);
    }
  };
  const min_elt = function (_param) {
    while(true) {
      const param = _param;
      if (param) {
        const l = param.l;
        if (!l) {
          return param.v;
        }
        _param = l;
        continue ;
      }
      throw new Caml_js_exceptions.MelangeError(Stdlib.Not_found, {
                MEL_EXN_ID: Stdlib.Not_found
              });
    };
  };
  const min_elt_opt = function (_param) {
    while(true) {
      const param = _param;
      if (!param) {
        return ;
      }
      const l = param.l;
      if (!l) {
        return Caml_option.some(param.v);
      }
      _param = l;
      continue ;
    };
  };
  const max_elt = function (_param) {
    while(true) {
      const param = _param;
      if (param) {
        if (!param.r) {
          return param.v;
        }
        _param = param.r;
        continue ;
      }
      throw new Caml_js_exceptions.MelangeError(Stdlib.Not_found, {
                MEL_EXN_ID: Stdlib.Not_found
              });
    };
  };
  const max_elt_opt = function (_param) {
    while(true) {
      const param = _param;
      if (!param) {
        return ;
      }
      if (!param.r) {
        return Caml_option.some(param.v);
      }
      _param = param.r;
      continue ;
    };
  };
  const remove_min_elt = function (param) {
    if (param) {
      const l = param.l;
      if (l) {
        return bal(remove_min_elt(l), param.v, param.r);
      } else {
        return param.r;
      }
    }
    throw new Caml_js_exceptions.MelangeError("Invalid_argument", {
              MEL_EXN_ID: "Invalid_argument",
              _1: "Set.remove_min_elt"
            });
  };
  const concat = function (t1, t2) {
    if (t1) {
      if (t2) {
        return join(t1, min_elt(t2), remove_min_elt(t2));
      } else {
        return t1;
      }
    } else {
      return t2;
    }
  };
  const split = function (x, param) {
    if (!param) {
      return [
              /* Empty */0,
              false,
              /* Empty */0
            ];
    }
    const r = param.r;
    const v = param.v;
    const l = param.l;
    const c = Curry._2(funarg.compare, x, v);
    if (c === 0) {
      return [
              l,
              true,
              r
            ];
    }
    if (c < 0) {
      const match = split(x, l);
      return [
              match[0],
              match[1],
              join(match[2], v, r)
            ];
    }
    const match$1 = split(x, r);
    return [
            join(l, v, match$1[0]),
            match$1[1],
            match$1[2]
          ];
  };
  const is_empty = function (param) {
    if (param) {
      return false;
    } else {
      return true;
    }
  };
  const mem = function (x, _param) {
    while(true) {
      const param = _param;
      if (!param) {
        return false;
      }
      const c = Curry._2(funarg.compare, x, param.v);
      if (c === 0) {
        return true;
      }
      _param = c < 0 ? param.l : param.r;
      continue ;
    };
  };
  const remove = function (x, t) {
    if (!t) {
      return /* Empty */0;
    }
    const r = t.r;
    const v = t.v;
    const l = t.l;
    const c = Curry._2(funarg.compare, x, v);
    if (c === 0) {
      if (l) {
        if (r) {
          return bal(l, min_elt(r), remove_min_elt(r));
        } else {
          return l;
        }
      } else {
        return r;
      }
    }
    if (c < 0) {
      const ll = remove(x, l);
      if (l === ll) {
        return t;
      } else {
        return bal(ll, v, r);
      }
    }
    const rr = remove(x, r);
    if (r === rr) {
      return t;
    } else {
      return bal(l, v, rr);
    }
  };
  const union = function (s1, s2) {
    if (!s1) {
      return s2;
    }
    if (!s2) {
      return s1;
    }
    const h2 = s2.h;
    const v2 = s2.v;
    const h1 = s1.h;
    const v1 = s1.v;
    if (h1 >= h2) {
      if (h2 === 1) {
        return add(v2, s1);
      }
      const match = split(v1, s2);
      return join(union(s1.l, match[0]), v1, union(s1.r, match[2]));
    }
    if (h1 === 1) {
      return add(v1, s2);
    }
    const match$1 = split(v2, s1);
    return join(union(match$1[0], s2.l), v2, union(match$1[2], s2.r));
  };
  const inter = function (s1, s2) {
    if (!s1) {
      return /* Empty */0;
    }
    if (!s2) {
      return /* Empty */0;
    }
    const r1 = s1.r;
    const v1 = s1.v;
    const l1 = s1.l;
    const match = split(v1, s2);
    const l2 = match[0];
    if (match[1]) {
      return join(inter(l1, l2), v1, inter(r1, match[2]));
    } else {
      return concat(inter(l1, l2), inter(r1, match[2]));
    }
  };
  const split_bis = function (x, param) {
    if (!param) {
      return /* NotFound */{
              _0: /* Empty */0,
              _1: (function (param) {
                  return /* Empty */0;
                })
            };
    }
    const r = param.r;
    const v = param.v;
    const l = param.l;
    const c = Curry._2(funarg.compare, x, v);
    if (c === 0) {
      return /* Found */0;
    }
    if (c < 0) {
      const match = split_bis(x, l);
      if (!match) {
        return /* Found */0;
      }
      const rl = match._1;
      return /* NotFound */{
              _0: match._0,
              _1: (function (param) {
                  return join(Curry._1(rl, undefined), v, r);
                })
            };
    }
    const match$1 = split_bis(x, r);
    if (match$1) {
      return /* NotFound */{
              _0: join(l, v, match$1._0),
              _1: match$1._1
            };
    } else {
      return /* Found */0;
    }
  };
  const disjoint = function (_s1, _s2) {
    while(true) {
      const s2 = _s2;
      const s1 = _s1;
      if (!s1) {
        return true;
      }
      if (!s2) {
        return true;
      }
      if (s1 === s2) {
        return false;
      }
      const match = split_bis(s1.v, s2);
      if (!match) {
        return false;
      }
      if (!disjoint(s1.l, match._0)) {
        return false;
      }
      _s2 = Curry._1(match._1, undefined);
      _s1 = s1.r;
      continue ;
    };
  };
  const diff = function (s1, s2) {
    if (!s1) {
      return /* Empty */0;
    }
    if (!s2) {
      return s1;
    }
    const r1 = s1.r;
    const v1 = s1.v;
    const l1 = s1.l;
    const match = split(v1, s2);
    const l2 = match[0];
    if (match[1]) {
      return concat(diff(l1, l2), diff(r1, match[2]));
    } else {
      return join(diff(l1, l2), v1, diff(r1, match[2]));
    }
  };
  const cons_enum = function (_s, _e) {
    while(true) {
      const e = _e;
      const s = _s;
      if (!s) {
        return e;
      }
      _e = /* More */{
        _0: s.v,
        _1: s.r,
        _2: e
      };
      _s = s.l;
      continue ;
    };
  };
  const compare = function (s1, s2) {
    let _e1 = cons_enum(s1, /* End */0);
    let _e2 = cons_enum(s2, /* End */0);
    while(true) {
      const e2 = _e2;
      const e1 = _e1;
      if (!e1) {
        if (e2) {
          return -1;
        } else {
          return 0;
        }
      }
      if (!e2) {
        return 1;
      }
      const c = Curry._2(funarg.compare, e1._0, e2._0);
      if (c !== 0) {
        return c;
      }
      _e2 = cons_enum(e2._1, e2._2);
      _e1 = cons_enum(e1._1, e1._2);
      continue ;
    };
  };
  const equal = function (s1, s2) {
    return compare(s1, s2) === 0;
  };
  const subset = function (_s1, _s2) {
    while(true) {
      const s2 = _s2;
      const s1 = _s1;
      if (!s1) {
        return true;
      }
      if (!s2) {
        return false;
      }
      const r2 = s2.r;
      const l2 = s2.l;
      const r1 = s1.r;
      const v1 = s1.v;
      const l1 = s1.l;
      const c = Curry._2(funarg.compare, v1, s2.v);
      if (c === 0) {
        if (!subset(l1, l2)) {
          return false;
        }
        _s2 = r2;
        _s1 = r1;
        continue ;
      }
      if (c < 0) {
        if (!subset(/* Node */{
                l: l1,
                v: v1,
                r: /* Empty */0,
                h: 0
              }, l2)) {
          return false;
        }
        _s1 = r1;
        continue ;
      }
      if (!subset(/* Node */{
              l: /* Empty */0,
              v: v1,
              r: r1,
              h: 0
            }, r2)) {
        return false;
      }
      _s1 = l1;
      continue ;
    };
  };
  const iter = function (f, _param) {
    while(true) {
      const param = _param;
      if (!param) {
        return ;
      }
      iter(f, param.l);
      Curry._1(f, param.v);
      _param = param.r;
      continue ;
    };
  };
  const fold = function (f, _s, _accu) {
    while(true) {
      const accu = _accu;
      const s = _s;
      if (!s) {
        return accu;
      }
      _accu = Curry._2(f, s.v, fold(f, s.l, accu));
      _s = s.r;
      continue ;
    };
  };
  const for_all = function (p, _param) {
    while(true) {
      const param = _param;
      if (!param) {
        return true;
      }
      if (!Curry._1(p, param.v)) {
        return false;
      }
      if (!for_all(p, param.l)) {
        return false;
      }
      _param = param.r;
      continue ;
    };
  };
  const exists = function (p, _param) {
    while(true) {
      const param = _param;
      if (!param) {
        return false;
      }
      if (Curry._1(p, param.v)) {
        return true;
      }
      if (exists(p, param.l)) {
        return true;
      }
      _param = param.r;
      continue ;
    };
  };
  const filter = function (p, t) {
    if (!t) {
      return /* Empty */0;
    }
    const r = t.r;
    const v = t.v;
    const l = t.l;
    const l$p = filter(p, l);
    const pv = Curry._1(p, v);
    const r$p = filter(p, r);
    if (pv) {
      if (l === l$p && r === r$p) {
        return t;
      } else {
        return join(l$p, v, r$p);
      }
    } else {
      return concat(l$p, r$p);
    }
  };
  const partition = function (p, param) {
    if (!param) {
      return [
              /* Empty */0,
              /* Empty */0
            ];
    }
    const v = param.v;
    const match = partition(p, param.l);
    const lf = match[1];
    const lt = match[0];
    const pv = Curry._1(p, v);
    const match$1 = partition(p, param.r);
    const rf = match$1[1];
    const rt = match$1[0];
    if (pv) {
      return [
              join(lt, v, rt),
              concat(lf, rf)
            ];
    } else {
      return [
              concat(lt, rt),
              join(lf, v, rf)
            ];
    }
  };
  const cardinal = function (param) {
    if (param) {
      return (cardinal(param.l) + 1 | 0) + cardinal(param.r) | 0;
    } else {
      return 0;
    }
  };
  const elements_aux = function (_accu, _param) {
    while(true) {
      const param = _param;
      const accu = _accu;
      if (!param) {
        return accu;
      }
      _param = param.l;
      _accu = {
        hd: param.v,
        tl: elements_aux(accu, param.r)
      };
      continue ;
    };
  };
  const elements = function (s) {
    return elements_aux(/* [] */0, s);
  };
  const find = function (x, _param) {
    while(true) {
      const param = _param;
      if (param) {
        const v = param.v;
        const c = Curry._2(funarg.compare, x, v);
        if (c === 0) {
          return v;
        }
        _param = c < 0 ? param.l : param.r;
        continue ;
      }
      throw new Caml_js_exceptions.MelangeError(Stdlib.Not_found, {
                MEL_EXN_ID: Stdlib.Not_found
              });
    };
  };
  const find_first = function (f, _param) {
    while(true) {
      const param = _param;
      if (param) {
        const v = param.v;
        if (Curry._1(f, v)) {
          let _v0 = v;
          let _param$1 = param.l;
          while(true) {
            const param$1 = _param$1;
            const v0 = _v0;
            if (!param$1) {
              return v0;
            }
            const v$1 = param$1.v;
            if (Curry._1(f, v$1)) {
              _param$1 = param$1.l;
              _v0 = v$1;
              continue ;
            }
            _param$1 = param$1.r;
            continue ;
          };
        }
        _param = param.r;
        continue ;
      }
      throw new Caml_js_exceptions.MelangeError(Stdlib.Not_found, {
                MEL_EXN_ID: Stdlib.Not_found
              });
    };
  };
  const find_first_opt = function (f, _param) {
    while(true) {
      const param = _param;
      if (!param) {
        return ;
      }
      const v = param.v;
      if (Curry._1(f, v)) {
        let _v0 = v;
        let _param$1 = param.l;
        while(true) {
          const param$1 = _param$1;
          const v0 = _v0;
          if (!param$1) {
            return Caml_option.some(v0);
          }
          const v$1 = param$1.v;
          if (Curry._1(f, v$1)) {
            _param$1 = param$1.l;
            _v0 = v$1;
            continue ;
          }
          _param$1 = param$1.r;
          continue ;
        };
      }
      _param = param.r;
      continue ;
    };
  };
  const find_last = function (f, _param) {
    while(true) {
      const param = _param;
      if (param) {
        const v = param.v;
        if (Curry._1(f, v)) {
          let _v0 = v;
          let _param$1 = param.r;
          while(true) {
            const param$1 = _param$1;
            const v0 = _v0;
            if (!param$1) {
              return v0;
            }
            const v$1 = param$1.v;
            if (Curry._1(f, v$1)) {
              _param$1 = param$1.r;
              _v0 = v$1;
              continue ;
            }
            _param$1 = param$1.l;
            continue ;
          };
        }
        _param = param.l;
        continue ;
      }
      throw new Caml_js_exceptions.MelangeError(Stdlib.Not_found, {
                MEL_EXN_ID: Stdlib.Not_found
              });
    };
  };
  const find_last_opt = function (f, _param) {
    while(true) {
      const param = _param;
      if (!param) {
        return ;
      }
      const v = param.v;
      if (Curry._1(f, v)) {
        let _v0 = v;
        let _param$1 = param.r;
        while(true) {
          const param$1 = _param$1;
          const v0 = _v0;
          if (!param$1) {
            return Caml_option.some(v0);
          }
          const v$1 = param$1.v;
          if (Curry._1(f, v$1)) {
            _param$1 = param$1.r;
            _v0 = v$1;
            continue ;
          }
          _param$1 = param$1.l;
          continue ;
        };
      }
      _param = param.l;
      continue ;
    };
  };
  const find_opt = function (x, _param) {
    while(true) {
      const param = _param;
      if (!param) {
        return ;
      }
      const v = param.v;
      const c = Curry._2(funarg.compare, x, v);
      if (c === 0) {
        return Caml_option.some(v);
      }
      _param = c < 0 ? param.l : param.r;
      continue ;
    };
  };
  const try_join = function (l, v, r) {
    if ((Caml_obj.caml_equal(l, /* Empty */0) || Curry._2(funarg.compare, max_elt(l), v) < 0) && (Caml_obj.caml_equal(r, /* Empty */0) || Curry._2(funarg.compare, v, min_elt(r)) < 0)) {
      return join(l, v, r);
    } else {
      return union(l, add(v, r));
    }
  };
  const map = function (f, t) {
    if (!t) {
      return /* Empty */0;
    }
    const r = t.r;
    const v = t.v;
    const l = t.l;
    const l$p = map(f, l);
    const v$p = Curry._1(f, v);
    const r$p = map(f, r);
    if (l === l$p && v === v$p && r === r$p) {
      return t;
    } else {
      return try_join(l$p, v$p, r$p);
    }
  };
  const filter_map = function (f, t) {
    if (!t) {
      return /* Empty */0;
    }
    const r = t.r;
    const v = t.v;
    const l = t.l;
    const l$p = filter_map(f, l);
    const v$p = Curry._1(f, v);
    const r$p = filter_map(f, r);
    if (v$p === undefined) {
      if (l$p) {
        if (r$p) {
          return try_join(l$p, min_elt(r$p), remove_min_elt(r$p));
        } else {
          return l$p;
        }
      } else {
        return r$p;
      }
    }
    const v$p$1 = Caml_option.valFromOption(v$p);
    if (l === l$p && v === v$p$1 && r === r$p) {
      return t;
    } else {
      return try_join(l$p, v$p$1, r$p);
    }
  };
  const of_list = function (l) {
    if (!l) {
      return /* Empty */0;
    }
    const match = l.tl;
    const x0 = l.hd;
    if (!match) {
      return singleton(x0);
    }
    const match$1 = match.tl;
    const x1 = match.hd;
    if (!match$1) {
      return add(x1, singleton(x0));
    }
    const match$2 = match$1.tl;
    const x2 = match$1.hd;
    if (!match$2) {
      return add(x2, add(x1, singleton(x0)));
    }
    const match$3 = match$2.tl;
    const x3 = match$2.hd;
    if (match$3) {
      if (match$3.tl) {
        let l$1 = Stdlib__List.sort_uniq(funarg.compare, l);
        const sub = function (n, l) {
          switch (n) {
            case 0 :
                return [
                        /* Empty */0,
                        l
                      ];
            case 1 :
                if (l) {
                  return [
                          /* Node */{
                            l: /* Empty */0,
                            v: l.hd,
                            r: /* Empty */0,
                            h: 1
                          },
                          l.tl
                        ];
                }
                break;
            case 2 :
                if (l) {
                  const match = l.tl;
                  if (match) {
                    return [
                            /* Node */{
                              l: /* Node */{
                                l: /* Empty */0,
                                v: l.hd,
                                r: /* Empty */0,
                                h: 1
                              },
                              v: match.hd,
                              r: /* Empty */0,
                              h: 2
                            },
                            match.tl
                          ];
                  }
                  
                }
                break;
            case 3 :
                if (l) {
                  const match$1 = l.tl;
                  if (match$1) {
                    const match$2 = match$1.tl;
                    if (match$2) {
                      return [
                              /* Node */{
                                l: /* Node */{
                                  l: /* Empty */0,
                                  v: l.hd,
                                  r: /* Empty */0,
                                  h: 1
                                },
                                v: match$1.hd,
                                r: /* Node */{
                                  l: /* Empty */0,
                                  v: match$2.hd,
                                  r: /* Empty */0,
                                  h: 1
                                },
                                h: 2
                              },
                              match$2.tl
                            ];
                    }
                    
                  }
                  
                }
                break;
            default:
              
          }
          const nl = n / 2 | 0;
          const match$3 = sub(nl, l);
          const l$1 = match$3[1];
          if (l$1) {
            const match$4 = sub((n - nl | 0) - 1 | 0, l$1.tl);
            return [
                    create(match$3[0], l$1.hd, match$4[0]),
                    match$4[1]
                  ];
          }
          throw new Caml_js_exceptions.MelangeError("Assert_failure", {
                    MEL_EXN_ID: "Assert_failure",
                    _1: [
                      "jscomp/stdlib/set.ml",
                      571,
                      18
                    ]
                  });
        };
        return sub(Stdlib__List.length(l$1), l$1)[0];
      } else {
        return add(match$3.hd, add(x3, add(x2, add(x1, singleton(x0)))));
      }
    } else {
      return add(x3, add(x2, add(x1, singleton(x0))));
    }
  };
  const add_seq = function (i, m) {
    return Stdlib__Seq.fold_left((function (s, x) {
                  return add(x, s);
                }), m, i);
  };
  const of_seq = function (i) {
    return add_seq(i, /* Empty */0);
  };
  const seq_of_enum_ = function (c, param) {
    if (!c) {
      return /* Nil */0;
    }
    const partial_arg = cons_enum(c._1, c._2);
    return /* Cons */{
            _0: c._0,
            _1: (function (param) {
                return seq_of_enum_(partial_arg, param);
              })
          };
  };
  const to_seq = function (c) {
    const partial_arg = cons_enum(c, /* End */0);
    return function (param) {
      return seq_of_enum_(partial_arg, param);
    };
  };
  const snoc_enum = function (_s, _e) {
    while(true) {
      const e = _e;
      const s = _s;
      if (!s) {
        return e;
      }
      _e = /* More */{
        _0: s.v,
        _1: s.l,
        _2: e
      };
      _s = s.r;
      continue ;
    };
  };
  const rev_seq_of_enum_ = function (c, param) {
    if (!c) {
      return /* Nil */0;
    }
    const partial_arg = snoc_enum(c._1, c._2);
    return /* Cons */{
            _0: c._0,
            _1: (function (param) {
                return rev_seq_of_enum_(partial_arg, param);
              })
          };
  };
  const to_rev_seq = function (c) {
    const partial_arg = snoc_enum(c, /* End */0);
    return function (param) {
      return rev_seq_of_enum_(partial_arg, param);
    };
  };
  const to_seq_from = function (low, s) {
    const aux = function (low, _s, _c) {
      while(true) {
        const c = _c;
        const s = _s;
        if (!s) {
          return c;
        }
        const r = s.r;
        const v = s.v;
        const n = Curry._2(funarg.compare, v, low);
        if (n === 0) {
          return /* More */{
                  _0: v,
                  _1: r,
                  _2: c
                };
        }
        if (n < 0) {
          _s = r;
          continue ;
        }
        _c = /* More */{
          _0: v,
          _1: r,
          _2: c
        };
        _s = s.l;
        continue ;
      };
    };
    const partial_arg = aux(low, s, /* End */0);
    return function (param) {
      return seq_of_enum_(partial_arg, param);
    };
  };
  return {
          empty: /* Empty */0,
          add: add,
          singleton: singleton,
          remove: remove,
          union: union,
          inter: inter,
          disjoint: disjoint,
          diff: diff,
          cardinal: cardinal,
          elements: elements,
          min_elt: min_elt,
          min_elt_opt: min_elt_opt,
          max_elt: max_elt,
          max_elt_opt: max_elt_opt,
          choose: min_elt,
          choose_opt: min_elt_opt,
          find: find,
          find_opt: find_opt,
          find_first: find_first,
          find_first_opt: find_first_opt,
          find_last: find_last,
          find_last_opt: find_last_opt,
          iter: iter,
          fold: fold,
          map: map,
          filter: filter,
          filter_map: filter_map,
          partition: partition,
          split: split,
          is_empty: is_empty,
          mem: mem,
          equal: equal,
          compare: compare,
          subset: subset,
          for_all: for_all,
          exists: exists,
          to_list: elements,
          of_list: of_list,
          to_seq_from: to_seq_from,
          to_seq: to_seq,
          to_rev_seq: to_rev_seq,
          add_seq: add_seq,
          of_seq: of_seq
        };
}

export {
  Make ,
}
/* No side effect */
