// Generated by Melange

import * as Stdlib__String from "./string.js";

const make = Stdlib__String.make;

const init = Stdlib__String.init;

const empty = Stdlib__String.empty;

const of_bytes = Stdlib__String.of_bytes;

const to_bytes = Stdlib__String.to_bytes;

const blit = Stdlib__String.blit;

const concat = Stdlib__String.concat;

const cat = Stdlib__String.cat;

const equal = Stdlib__String.equal;

const compare = Stdlib__String.compare;

const starts_with = Stdlib__String.starts_with;

const ends_with = Stdlib__String.ends_with;

const contains_from = Stdlib__String.contains_from;

const rcontains_from = Stdlib__String.rcontains_from;

const contains = Stdlib__String.contains;

const sub = Stdlib__String.sub;

const split_on_char = Stdlib__String.split_on_char;

const map = Stdlib__String.map;

const mapi = Stdlib__String.mapi;

const fold_left = Stdlib__String.fold_left;

const fold_right = Stdlib__String.fold_right;

const for_all = Stdlib__String.for_all;

const exists = Stdlib__String.exists;

const trim = Stdlib__String.trim;

const escaped = Stdlib__String.escaped;

const uppercase_ascii = Stdlib__String.uppercase_ascii;

const lowercase_ascii = Stdlib__String.lowercase_ascii;

const capitalize_ascii = Stdlib__String.capitalize_ascii;

const uncapitalize_ascii = Stdlib__String.uncapitalize_ascii;

const iter = Stdlib__String.iter;

const iteri = Stdlib__String.iteri;

const index_from = Stdlib__String.index_from;

const index_from_opt = Stdlib__String.index_from_opt;

const rindex_from = Stdlib__String.rindex_from;

const rindex_from_opt = Stdlib__String.rindex_from_opt;

const index = Stdlib__String.index;

const index_opt = Stdlib__String.index_opt;

const rindex = Stdlib__String.rindex;

const rindex_opt = Stdlib__String.rindex_opt;

const to_seq = Stdlib__String.to_seq;

const to_seqi = Stdlib__String.to_seqi;

const of_seq = Stdlib__String.of_seq;

const get_utf_8_uchar = Stdlib__String.get_utf_8_uchar;

const is_valid_utf_8 = Stdlib__String.is_valid_utf_8;

const get_utf_16be_uchar = Stdlib__String.get_utf_16be_uchar;

const is_valid_utf_16be = Stdlib__String.is_valid_utf_16be;

const get_utf_16le_uchar = Stdlib__String.get_utf_16le_uchar;

const is_valid_utf_16le = Stdlib__String.is_valid_utf_16le;

const get_uint8 = Stdlib__String.get_uint8;

const get_int8 = Stdlib__String.get_int8;

const get_uint16_ne = Stdlib__String.get_uint16_ne;

const get_uint16_be = Stdlib__String.get_uint16_be;

const get_uint16_le = Stdlib__String.get_uint16_le;

const get_int16_ne = Stdlib__String.get_int16_ne;

const get_int16_be = Stdlib__String.get_int16_be;

const get_int16_le = Stdlib__String.get_int16_le;

const get_int32_ne = Stdlib__String.get_int32_ne;

const hash = Stdlib__String.hash;

const seeded_hash = Stdlib__String.seeded_hash;

const get_int32_be = Stdlib__String.get_int32_be;

const get_int32_le = Stdlib__String.get_int32_le;

const get_int64_ne = Stdlib__String.get_int64_ne;

const get_int64_be = Stdlib__String.get_int64_be;

const get_int64_le = Stdlib__String.get_int64_le;

export {
  make ,
  init ,
  empty ,
  of_bytes ,
  to_bytes ,
  blit ,
  concat ,
  cat ,
  equal ,
  compare ,
  starts_with ,
  ends_with ,
  contains_from ,
  rcontains_from ,
  contains ,
  sub ,
  split_on_char ,
  map ,
  mapi ,
  fold_left ,
  fold_right ,
  for_all ,
  exists ,
  trim ,
  escaped ,
  uppercase_ascii ,
  lowercase_ascii ,
  capitalize_ascii ,
  uncapitalize_ascii ,
  iter ,
  iteri ,
  index_from ,
  index_from_opt ,
  rindex_from ,
  rindex_from_opt ,
  index ,
  index_opt ,
  rindex ,
  rindex_opt ,
  to_seq ,
  to_seqi ,
  of_seq ,
  get_utf_8_uchar ,
  is_valid_utf_8 ,
  get_utf_16be_uchar ,
  is_valid_utf_16be ,
  get_utf_16le_uchar ,
  is_valid_utf_16le ,
  get_uint8 ,
  get_int8 ,
  get_uint16_ne ,
  get_uint16_be ,
  get_uint16_le ,
  get_int16_ne ,
  get_int16_be ,
  get_int16_le ,
  get_int32_ne ,
  hash ,
  seeded_hash ,
  get_int32_be ,
  get_int32_le ,
  get_int64_ne ,
  get_int64_be ,
  get_int64_le ,
}
/* No side effect */
